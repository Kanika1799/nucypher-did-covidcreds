{"version":3,"sources":["RadioButtonIOS.tsx"],"names":["RadioButtonIOS","props","disabled","onPress","theme","status","value","rest","checkedColor","colors","color","accent","rippleColor","text","alpha","rgb","string","fade","context","checked","contextValue","undefined","onValueChange","styles","container","opacity","I18nManager","isRTL","React","Component","StyleSheet","create","borderRadius","padding"],"mappings":"ugCAAA,oDACA,yCACA,oDACA,oDACA,8BACA,uFACA,2EACA,2C,0GA6CMA,CAAAA,c,uWAGK,iBACsD,KAAKC,KAD3D,CACCC,QADD,aACCA,QADD,CACWC,OADX,aACWA,OADX,CACoBC,KADpB,aACoBA,KADpB,CAC2BC,MAD3B,aAC2BA,MAD3B,CACmCC,KADnC,aACmCA,KADnC,CAC6CC,IAD7C,oGAGP,GAAMC,CAAAA,YAAY,CAAGN,QAAQ,CACzBE,KAAK,CAACK,MAAN,CAAaP,QADY,CAEzB,KAAKD,KAAL,CAAWS,KAAX,EAAoBN,KAAK,CAACK,MAAN,CAAaE,MAFrC,CAIA,GAAIC,CAAAA,WAAJ,CAEA,GAAIV,QAAJ,CAAc,CACZU,WAAW,CAAG,mBAAMR,KAAK,CAACK,MAAN,CAAaI,IAAnB,EACXC,KADW,CACL,IADK,EAEXC,GAFW,GAGXC,MAHW,EAAd,CAID,CALD,IAKO,CACLJ,WAAW,CAAG,mBAAMJ,YAAN,EACXS,IADW,CACN,IADM,EAEXF,GAFW,GAGXC,MAHW,EAAd,CAID,CAED,MACE,qBAAC,oCAAD,CAAoB,QAApB,kDACG,SAACE,OAAD,CAAsC,CACrC,GAAMC,CAAAA,OAAO,CACX,qBAAU,CACRC,YAAY,CAAEF,OAAF,SAAEA,OAAF,iBAAEA,OAAO,CAAEZ,KADf,CAERD,MAAM,CAANA,MAFQ,CAGRC,KAAK,CAALA,KAHQ,CAAV,IAIO,SALT,CAOA,MACE,qBAAC,wBAAD,0BACMC,IADN,EAEE,UAAU,KAFZ,CAGE,WAAW,CAAEK,WAHf,CAIE,OAAO,CACLV,QAAQ,CACJmB,SADI,CAEJ,UAAM,CACJ,uBAAY,CACVlB,OAAO,CAAPA,OADU,CAEVG,KAAK,CAALA,KAFU,CAGVgB,aAAa,CAAEJ,OAAF,SAAEA,OAAF,iBAAEA,OAAO,CAAEI,aAHd,CAAZ,EAKD,CAbT,CAeE,mBAAmB,CAAEpB,QAAQ,CAAG,CAAC,QAAD,CAAW,UAAX,CAAH,CAA4B,QAf3D,CAgBE,0BAA0B,CACxBiB,OAAO,CAAG,qBAAH,CAA2B,uBAjBtC,CAmBE,iBAAiB,CAAC,QAnBpB,CAoBE,mBAAmB,CAAEjB,QAAQ,CAAG,CAAC,UAAD,CAAH,CAAkB,EApBjD,CAqBE,uBAAuB,CAAC,QArB1B,CAsBE,KAAK,CAAEqB,MAAM,CAACC,SAtBhB,kDAwBE,oBAAC,iBAAD,EAAM,KAAK,CAAE,CAAEC,OAAO,CAAEN,OAAO,CAAG,CAAH,CAAO,CAAzB,CAAb,kDACE,oBAAC,8BAAD,EACE,gBAAgB,CAAE,KADpB,CAEE,IAAI,CAAC,OAFP,CAGE,IAAI,CAAE,EAHR,CAIE,KAAK,CAAEX,YAJT,CAKE,SAAS,CAAEkB,yBAAYC,KAAZ,CAAoB,KAApB,CAA4B,KALzC,kDADF,CAxBF,CADF,CAoCD,CA7CH,CADF,CAiDD,C,4BAzE0BC,KAAK,CAACC,S,qEAA7B7B,c,eACiB,iB,EA2EvB,GAAMuB,CAAAA,MAAM,CAAGO,wBAAWC,MAAX,CAAkB,CAC/BP,SAAS,CAAE,CACTQ,YAAY,CAAE,EADL,CAETC,OAAO,CAAE,CAFA,CADoB,CAAlB,CAAf,C,aAOe,uBAAUjC,cAAV,C","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, I18nManager } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport { Theme, $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass RadioButtonIOS extends React.Component<Props> {\n  static displayName = 'RadioButton.IOS';\n\n  render() {\n    const { disabled, onPress, theme, status, value, ...rest } = this.props;\n\n    const checkedColor = disabled\n      ? theme.colors.disabled\n      : this.props.color || theme.colors.accent;\n\n    let rippleColor: string;\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text)\n        .alpha(0.16)\n        .rgb()\n        .string();\n    } else {\n      rippleColor = color(checkedColor)\n        .fade(0.32)\n        .rgb()\n        .string();\n    }\n\n    return (\n      <RadioButtonContext.Consumer>\n        {(context?: RadioButtonContextType) => {\n          const checked =\n            isChecked({\n              contextValue: context?.value,\n              status,\n              value,\n            }) === 'checked';\n\n          return (\n            <TouchableRipple\n              {...rest}\n              borderless\n              rippleColor={rippleColor}\n              onPress={\n                disabled\n                  ? undefined\n                  : () => {\n                      handlePress({\n                        onPress,\n                        value,\n                        onValueChange: context?.onValueChange,\n                      });\n                    }\n              }\n              accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n              accessibilityComponentType={\n                checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n              }\n              accessibilityRole=\"button\"\n              accessibilityStates={disabled ? ['disabled'] : []}\n              accessibilityLiveRegion=\"polite\"\n              style={styles.container}\n            >\n              <View style={{ opacity: checked ? 1 : 0 }}>\n                <MaterialCommunityIcon\n                  allowFontScaling={false}\n                  name=\"check\"\n                  size={24}\n                  color={checkedColor}\n                  direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n                />\n              </View>\n            </TouchableRipple>\n          );\n        }}\n      </RadioButtonContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(RadioButtonIOS);\n\n// @component-docs ignore-next-line\nexport { RadioButtonIOS };\n"]}