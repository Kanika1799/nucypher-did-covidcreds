{"version":3,"sources":["ProgressBar.tsx"],"names":["INDETERMINATE_DURATION","INDETERMINATE_MAX_WIDTH","isRTL","I18nManager","ProgressBar","width","timer","Animated","Value","fade","event","visible","props","previousWidth","state","setState","nativeEvent","layout","startAnimation","indeterminate","progress","scale","theme","animation","timing","duration","toValue","useNativeDriver","isInteraction","start","indeterminateAnimation","Platform","OS","setValue","loop","stop","prevProps","stopAnimation","color","style","rest","tintColor","colors","primary","trackTintColor","alpha","rgb","string","onLayout","styles","container","backgroundColor","opacity","progressBar","transform","translateX","interpolate","inputRange","outputRange","scaleX","React","Component","StyleSheet","create","height","overflow","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Platform,\n  StyleSheet,\n  View,\n  ViewStyle,\n  StyleProp,\n  LayoutChangeEvent,\n  I18nManager,\n} from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Progress value (between 0 and 1).\n   */\n  progress?: number;\n  /**\n   * Color of the progress bar. The background color will be calculated based on this but you can change it by passing `backgroundColor` to `style` prop.\n   */\n  color?: string;\n  /**\n   * If the progress bar will show indeterminate progress.\n   */\n  indeterminate?: boolean;\n  /**\n   * Whether to show the ProgressBar (true, the default) or hide it (false).\n   */\n  visible?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  width: number;\n  fade: Animated.Value;\n  timer: Animated.Value;\n};\n\nconst INDETERMINATE_DURATION = 2000;\nconst INDETERMINATE_MAX_WIDTH = 0.6;\nconst { isRTL } = I18nManager;\n\n/**\n * Progress bar is an indicator used to present progress of some activity in the app.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/progress-bar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ProgressBar, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <ProgressBar progress={0.5} color={Colors.red800} />\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass ProgressBar extends React.Component<Props, State> {\n  static defaultProps = {\n    visible: true,\n    progress: 0,\n  };\n\n  state = {\n    width: 0,\n    timer: new Animated.Value(0),\n    fade: new Animated.Value(0),\n  };\n\n  indeterminateAnimation: Animated.CompositeAnimation | null = null;\n\n  componentDidUpdate(prevProps: Props) {\n    const { visible, progress } = this.props;\n\n    if (progress !== prevProps.progress || visible !== prevProps.visible) {\n      if (visible) {\n        this.startAnimation();\n      } else {\n        this.stopAnimation();\n      }\n    }\n  }\n\n  private onLayout = (event: LayoutChangeEvent) => {\n    const { visible } = this.props;\n    const { width: previousWidth } = this.state;\n\n    this.setState({ width: event.nativeEvent.layout.width }, () => {\n      // Start animation the very first time when previously the width was unclear\n      if (visible && previousWidth === 0) {\n        this.startAnimation();\n      }\n    });\n  };\n\n  private startAnimation = () => {\n    const {\n      indeterminate,\n      progress,\n      theme: {\n        animation: { scale },\n      },\n    } = this.props;\n    const { fade, timer } = this.state;\n\n    // Show progress bar\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 1,\n      useNativeDriver: true,\n      isInteraction: false,\n    }).start();\n\n    // Animate progress bar\n    if (indeterminate) {\n      if (!this.indeterminateAnimation) {\n        this.indeterminateAnimation = Animated.timing(timer, {\n          duration: INDETERMINATE_DURATION,\n          toValue: 1,\n          // Animated.loop does not work if useNativeDriver is true on web\n          useNativeDriver: Platform.OS !== 'web',\n          isInteraction: false,\n        });\n      }\n\n      // Reset timer to the beginning\n      timer.setValue(0);\n\n      Animated.loop(this.indeterminateAnimation).start();\n    } else {\n      Animated.timing(timer, {\n        duration: 200 * scale,\n        toValue: progress ? progress : 0,\n        useNativeDriver: true,\n        isInteraction: false,\n      }).start();\n    }\n  };\n\n  private stopAnimation = () => {\n    const { fade } = this.state;\n    const { scale } = this.props.theme.animation;\n\n    // Stop indeterminate animation\n    if (this.indeterminateAnimation) {\n      this.indeterminateAnimation.stop();\n    }\n\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 0,\n      useNativeDriver: true,\n      isInteraction: false,\n    }).start();\n  };\n\n  render() {\n    const {\n      color,\n      indeterminate,\n      style,\n      theme,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      progress,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      visible,\n      ...rest\n    } = this.props;\n    const { fade, timer, width } = this.state;\n    const tintColor = color || theme.colors.primary;\n    const trackTintColor = setColor(tintColor)\n      .alpha(0.38)\n      .rgb()\n      .string();\n\n    return (\n      <View onLayout={this.onLayout} {...rest}>\n        <Animated.View\n          style={[\n            styles.container,\n            { backgroundColor: trackTintColor, opacity: fade },\n            style,\n          ]}\n        >\n          <Animated.View\n            style={[\n              styles.progressBar,\n              {\n                backgroundColor: tintColor,\n                width,\n                transform: [\n                  {\n                    translateX: timer.interpolate(\n                      indeterminate\n                        ? {\n                            inputRange: [0, 0.5, 1],\n                            outputRange: [\n                              (isRTL ? 1 : -1) * 0.5 * width,\n                              (isRTL ? 1 : -1) *\n                                0.5 *\n                                INDETERMINATE_MAX_WIDTH *\n                                width,\n                              (isRTL ? -1 : 1) * 0.7 * width,\n                            ],\n                          }\n                        : {\n                            inputRange: [0, 1],\n                            outputRange: [(isRTL ? 1 : -1) * 0.5 * width, 0],\n                          }\n                    ),\n                  },\n                  {\n                    // Workaround for workaround for https://github.com/facebook/react-native/issues/6278\n                    scaleX: timer.interpolate(\n                      indeterminate\n                        ? {\n                            inputRange: [0, 0.5, 1],\n                            outputRange: [\n                              0.0001,\n                              INDETERMINATE_MAX_WIDTH,\n                              0.0001,\n                            ],\n                          }\n                        : {\n                            inputRange: [0, 1],\n                            outputRange: [0.0001, 1],\n                          }\n                    ),\n                  },\n                ],\n              },\n            ]}\n          />\n        </Animated.View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 4,\n    overflow: 'hidden',\n  },\n\n  progressBar: {\n    flex: 1,\n  },\n});\n\nexport default withTheme(ProgressBar);\n"]}