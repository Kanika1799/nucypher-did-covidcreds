{"version":3,"sources":["PortalHost.tsx"],"names":["PortalContext","React","createContext","PortalHost","manager","children","key","nextKey","mount","queue","push","type","update","op","index","findIndex","o","unmount","length","action","pop","styles","container","props","setManager","Component","StyleSheet","create","flex"],"mappings":"k7BAAA,oDACA,yCACA,sE,8FAiBO,GAAMA,CAAAA,aAAa,CAAGC,KAAK,CAACC,aAAN,CAAmC,IAAnC,CAAtB,C,uCA0BcC,CAAAA,U,ihBA0BE,SAACC,OAAD,CAA+C,CAClE,MAAKA,OAAL,CAAeA,OAAf,CACD,C,kFAEe,SAACC,QAAD,CAA+B,CAC7C,GAAMC,CAAAA,GAAG,CAAG,MAAKC,OAAL,EAAZ,CAEA,GAAI,MAAKH,OAAT,CAAkB,CAChB,MAAKA,OAAL,CAAaI,KAAb,CAAmBF,GAAnB,CAAwBD,QAAxB,EACD,CAFD,IAEO,CACL,MAAKI,KAAL,CAAWC,IAAX,CAAgB,CAAEC,IAAI,CAAE,OAAR,CAAiBL,GAAG,CAAHA,GAAjB,CAAsBD,QAAQ,CAARA,QAAtB,CAAhB,EACD,CAED,MAAOC,CAAAA,GAAP,CACD,C,mFAEgB,SAACA,GAAD,CAAcD,QAAd,CAA4C,CAC3D,GAAI,MAAKD,OAAT,CAAkB,CAChB,MAAKA,OAAL,CAAaQ,MAAb,CAAoBN,GAApB,CAAyBD,QAAzB,EACD,CAFD,IAEO,CACL,GAAMQ,CAAAA,EAAE,CAAG,CAAEF,IAAI,CAAE,OAAR,CAAiBL,GAAG,CAAHA,GAAjB,CAAsBD,QAAQ,CAARA,QAAtB,CAAX,CACA,GAAMS,CAAAA,KAAK,CAAG,MAAKL,KAAL,CAAWM,SAAX,CACZ,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACL,IAAF,GAAW,OAAX,EAAuBK,CAAC,CAACL,IAAF,GAAW,QAAX,EAAuBK,CAAC,CAACV,GAAF,GAAUA,GAA5D,EADW,CAAd,CAIA,GAAIQ,KAAK,CAAG,CAAC,CAAb,CAAgB,CAEd,MAAKL,KAAL,CAAWK,KAAX,EAAoBD,EAApB,CACD,CAHD,IAGO,CACL,MAAKJ,KAAL,CAAWC,IAAX,CAAgBG,EAAhB,EACD,CACF,CACF,C,oFAEiB,SAACP,GAAD,CAAiB,CACjC,GAAI,MAAKF,OAAT,CAAkB,CAChB,MAAKA,OAAL,CAAaa,OAAb,CAAqBX,GAArB,EACD,CAFD,IAEO,CACL,MAAKG,KAAL,CAAWC,IAAX,CAAgB,CAAEC,IAAI,CAAE,SAAR,CAAmBL,GAAG,CAAHA,GAAnB,CAAhB,EACD,CACF,C,oFAEiB,C,kFACW,E,2MAlET,CAClB,GAAMF,CAAAA,OAAO,CAAG,KAAKA,OAArB,CACA,GAAMK,CAAAA,KAAK,CAAG,KAAKA,KAAnB,CAEA,MAAOA,KAAK,CAACS,MAAN,EAAgBd,OAAvB,CAAgC,CAC9B,GAAMe,CAAAA,MAAM,CAAGV,KAAK,CAACW,GAAN,EAAf,CACA,GAAID,MAAJ,CAAY,CAEV,OAAQA,MAAM,CAACR,IAAf,EACE,IAAK,OAAL,CACEP,OAAO,CAACI,KAAR,CAAcW,MAAM,CAACb,GAArB,CAA0Ba,MAAM,CAACd,QAAjC,EACA,MACF,IAAK,QAAL,CACED,OAAO,CAACQ,MAAR,CAAeO,MAAM,CAACb,GAAtB,CAA2Ba,MAAM,CAACd,QAAlC,EACA,MACF,IAAK,SAAL,CACED,OAAO,CAACa,OAAR,CAAgBE,MAAM,CAACb,GAAvB,EACA,MATJ,CAWD,CACF,CACF,C,uCAgDQ,CACP,MACE,qBAAC,aAAD,CAAe,QAAf,EACE,KAAK,CAAE,CACLE,KAAK,CAAE,KAAKA,KADP,CAELI,MAAM,CAAE,KAAKA,MAFR,CAGLK,OAAO,CAAE,KAAKA,OAHT,CADT,kDAQE,oBAAC,iBAAD,EACE,KAAK,CAAEI,MAAM,CAACC,SADhB,CAEE,WAAW,CAAE,KAFf,CAGE,aAAa,CAAC,UAHhB,kDAKG,KAAKC,KAAL,CAAWlB,QALd,CARF,CAeE,oBAAC,sBAAD,EAAe,GAAG,CAAE,KAAKmB,UAAzB,kDAfF,CADF,CAmBD,C,wBA5FqCvB,KAAK,CAACwB,S,0DAAzBtB,U,eACE,a,EA8FvB,GAAMkB,CAAAA,MAAM,CAAGK,wBAAWC,MAAX,CAAkB,CAC/BL,SAAS,CAAE,CACTM,IAAI,CAAE,CADG,CADoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport PortalManager from './PortalManager';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype Operation =\n  | { type: 'mount'; key: number; children: React.ReactNode }\n  | { type: 'update'; key: number; children: React.ReactNode }\n  | { type: 'unmount'; key: number };\n\nexport type PortalMethods = {\n  mount: (children: React.ReactNode) => number;\n  update: (key: number, children: React.ReactNode) => void;\n  unmount: (key: number) => void;\n};\n\nexport const PortalContext = React.createContext<PortalMethods>(null as any);\n\n/**\n * Portal host renders all of its children `Portal` elements.\n * For example, you can wrap a screen in `Portal.Host` to render items above the screen.\n * If you're using the `Provider` component, it already includes `Portal.Host`.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Text } from 'react-native';\n * import { Portal } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   render() {\n *     return (\n *       <Portal.Host>\n *         <Text>Content of the app</Text>\n *       </Portal.Host>\n *     );\n *   }\n * }\n * ```\n *\n * Here any `Portal` elements under `<App />` are rendered alongside `<App />` and will appear above `<App />` like a `Modal`.\n */\nexport default class PortalHost extends React.Component<Props> {\n  static displayName = 'Portal.Host';\n\n  componentDidMount() {\n    const manager = this.manager;\n    const queue = this.queue;\n\n    while (queue.length && manager) {\n      const action = queue.pop();\n      if (action) {\n        // eslint-disable-next-line default-case\n        switch (action.type) {\n          case 'mount':\n            manager.mount(action.key, action.children);\n            break;\n          case 'update':\n            manager.update(action.key, action.children);\n            break;\n          case 'unmount':\n            manager.unmount(action.key);\n            break;\n        }\n      }\n    }\n  }\n\n  private setManager = (manager: PortalManager | undefined | null) => {\n    this.manager = manager;\n  };\n\n  private mount = (children: React.ReactNode) => {\n    const key = this.nextKey++;\n\n    if (this.manager) {\n      this.manager.mount(key, children);\n    } else {\n      this.queue.push({ type: 'mount', key, children });\n    }\n\n    return key;\n  };\n\n  private update = (key: number, children: React.ReactNode) => {\n    if (this.manager) {\n      this.manager.update(key, children);\n    } else {\n      const op = { type: 'mount', key, children };\n      const index = this.queue.findIndex(\n        o => o.type === 'mount' || (o.type === 'update' && o.key === key)\n      );\n\n      if (index > -1) {\n        // @ts-ignore\n        this.queue[index] = op;\n      } else {\n        this.queue.push(op as Operation);\n      }\n    }\n  };\n\n  private unmount = (key: number) => {\n    if (this.manager) {\n      this.manager.unmount(key);\n    } else {\n      this.queue.push({ type: 'unmount', key });\n    }\n  };\n\n  private nextKey = 0;\n  private queue: Operation[] = [];\n  private manager: PortalManager | null | undefined;\n\n  render() {\n    return (\n      <PortalContext.Provider\n        value={{\n          mount: this.mount,\n          update: this.update,\n          unmount: this.unmount,\n        }}\n      >\n        {/* Need collapsable=false here to clip the elevations, otherwise they appear above Portal components */}\n        <View\n          style={styles.container}\n          collapsable={false}\n          pointerEvents=\"box-none\"\n        >\n          {this.props.children}\n        </View>\n        <PortalManager ref={this.setManager} />\n      </PortalContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]}