{"version":3,"sources":["Badge.tsx"],"names":["defaultSize","Badge","opacity","Animated","Value","props","visible","prevProps","scale","theme","animation","timing","state","toValue","duration","useNativeDriver","start","children","size","style","rest","StyleSheet","flatten","backgroundColor","colors","notification","restStyle","textColor","isLight","black","white","borderRadius","color","fontSize","fonts","regular","lineHeight","height","minWidth","styles","container","React","Component","create","alignSelf","textAlign","textAlignVertical","paddingHorizontal","overflow"],"mappings":"ymCAAA,oDACA,yCACA,oDACA,wCACA,wC,23BAGA,GAAMA,CAAAA,WAAW,CAAG,EAApB,C,GAsDMC,CAAAA,K,wfAMI,CACNC,OAAO,CAAE,GAAIC,uBAASC,KAAb,CAAmB,MAAKC,KAAL,CAAWC,OAAX,CAAqB,CAArB,CAAyB,CAA5C,CADH,C,6GAIWC,S,CAAkB,iBAM/B,KAAKF,KAN0B,CAEjCC,OAFiC,aAEjCA,OAFiC,CAIlBE,KAJkB,aAGjCC,KAHiC,CAI/BC,SAJ+B,CAIlBF,KAJkB,CAQnC,GAAIF,OAAO,GAAKC,SAAS,CAACD,OAA1B,CAAmC,CACjCH,sBAASQ,MAAT,CAAgB,KAAKC,KAAL,CAAWV,OAA3B,CAAoC,CAClCW,OAAO,CAAEP,OAAO,CAAG,CAAH,CAAO,CADW,CAElCQ,QAAQ,CAAE,IAAMN,KAFkB,CAGlCO,eAAe,CAAE,IAHiB,CAApC,EAIGC,KAJH,GAKD,CACF,C,uCAEQ,kBASH,KAAKX,KATF,CAELY,QAFK,cAELA,QAFK,gCAGLC,IAHK,CAGLA,IAHK,4BAGElB,WAHF,mBAILmB,KAJK,cAILA,KAJK,CAKLV,KALK,cAKLA,KALK,CAOLH,OAPK,cAOLA,OAPK,CAQFc,IARE,sGAUClB,CAAAA,OAVD,CAUa,KAAKU,KAVlB,CAUCV,OAVD,UAaLmB,wBAAWC,OAAX,CAAmBH,KAAnB,GAA6B,EAbxB,2BAYCI,eAZD,CAYCA,eAZD,+BAYmBd,KAAK,CAACe,MAAN,CAAaC,YAZhC,sBAYiDC,SAZjD,iEAcP,GAAMC,CAAAA,SAAS,CAAG,mBAAMJ,eAAN,EAAuBK,OAAvB,GAAmCC,aAAnC,CAA2CC,aAA7D,CAEA,GAAMC,CAAAA,YAAY,CAAGb,IAAI,CAAG,CAA5B,CAEA,MACE,qBAAC,qBAAD,CAAU,IAAV,wBACE,aAAa,CAAE,CADjB,CAEE,KAAK,CAAE,gBAEHhB,OAAO,CAAPA,OAFG,CAGHqB,eAAe,CAAfA,eAHG,CAIHS,KAAK,CAAEL,SAJJ,CAKHM,QAAQ,CAAEf,IAAI,CAAG,GALd,EAMAT,KAAK,CAACyB,KAAN,CAAYC,OANZ,EAOHC,UAAU,CAAElB,IAPT,CAQHmB,MAAM,CAAEnB,IARL,CASHoB,QAAQ,CAAEpB,IATP,CAUHa,YAAY,CAAZA,YAVG,GAYLQ,MAAM,CAACC,SAZF,CAaLd,SAbK,CAFT,EAiBMN,IAjBN,oDAmBGH,QAnBH,CADF,CAuBD,C,mBApEiBwB,KAAK,CAACC,S,+BAApBzC,K,gBACkB,CACpBK,OAAO,CAAE,IADW,CAEpBY,IAAI,CAAElB,WAFc,C,eAsET,uBAAUC,KAAV,C,0BAEf,GAAMsC,CAAAA,MAAM,CAAGlB,wBAAWsB,MAAX,CAAkB,CAC/BH,SAAS,CAAE,CACTI,SAAS,CAAE,UADF,CAETC,SAAS,CAAE,QAFF,CAGTC,iBAAiB,CAAE,QAHV,CAITC,iBAAiB,CAAE,CAJV,CAKTC,QAAQ,CAAE,QALD,CADoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, StyleProp, TextStyle } from 'react-native';\nimport color from 'color';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\n\nconst defaultSize = 20;\n\ntype Props = React.ComponentProps<typeof Animated.Text> & {\n  /**\n   * Whether the badge is visible\n   */\n  visible: boolean;\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number;\n  /**\n   * Size of the `Badge`.\n   */\n  size?: number;\n  style?: StyleProp<TextStyle>;\n  ref?: React.RefObject<typeof Animated.Text>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  opacity: Animated.Value;\n};\n\n/**\n * Badges are small status descriptors for UI elements.\n * A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-1.png\" />\n *     <figcaption>Badge with content</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-2.png\" />\n *     <figcaption>Badge without content</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Badge } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Badge>3</Badge>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Badge extends React.Component<Props, State> {\n  static defaultProps = {\n    visible: true,\n    size: defaultSize,\n  };\n\n  state = {\n    opacity: new Animated.Value(this.props.visible ? 1 : 0),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      visible,\n      theme: {\n        animation: { scale },\n      },\n    } = this.props;\n\n    if (visible !== prevProps.visible) {\n      Animated.timing(this.state.opacity, {\n        toValue: visible ? 1 : 0,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }\n\n  render() {\n    const {\n      children,\n      size = defaultSize,\n      style,\n      theme,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      visible,\n      ...rest\n    } = this.props;\n    const { opacity } = this.state;\n\n    const { backgroundColor = theme.colors.notification, ...restStyle } =\n      StyleSheet.flatten(style) || {};\n    const textColor = color(backgroundColor).isLight() ? black : white;\n\n    const borderRadius = size / 2;\n\n    return (\n      <Animated.Text\n        numberOfLines={1}\n        style={[\n          {\n            opacity,\n            backgroundColor,\n            color: textColor,\n            fontSize: size * 0.5,\n            ...theme.fonts.regular,\n            lineHeight: size,\n            height: size,\n            minWidth: size,\n            borderRadius,\n          },\n          styles.container,\n          restStyle,\n        ]}\n        {...rest}\n      >\n        {children}\n      </Animated.Text>\n    );\n  }\n}\n\nexport default withTheme(Badge);\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden',\n  },\n});\n"]}