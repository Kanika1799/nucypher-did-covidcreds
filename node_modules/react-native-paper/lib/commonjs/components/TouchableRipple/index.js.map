{"version":3,"sources":["index.tsx"],"names":["TouchableRipple","e","props","centered","rippleColor","onPressIn","theme","dark","colors","calculatedRippleColor","text","alpha","rgb","string","button","currentTarget","style","window","getComputedStyle","dimensions","getBoundingClientRect","touchX","touchY","width","height","startX","nativeEvent","touches","pageX","startY","pageY","left","top","size","Math","min","max","container","document","createElement","setAttribute","position","pointerEvents","right","bottom","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","overflow","ripple","backgroundColor","borderRadius","transitionProperty","transitionDuration","transitionTimingFunction","transformOrigin","transform","opacity","appendChild","requestAnimationFrame","onPressOut","containers","querySelectorAll","forEach","firstChild","setTimeout","parentNode","removeChild","background","borderless","disabledProp","disabled","underlayColor","children","rest","onPress","handlePressIn","handlePressOut","styles","touchable","React","Children","only","Component","StyleSheet","create"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n} from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\nimport { Theme } from '../../types';\n\ntype Props = React.ComponentPropsWithRef<typeof TouchableWithoutFeedback> & {\n  /**\n   * Whether to render the ripple outside the view bounds.\n   */\n  borderless?: boolean;\n  /**\n   * Type of background drawabale to display the feedback (Android).\n   * https://facebook.github.io/react-native/docs/touchablenativefeedback.html#background\n   */\n  background?: Object;\n  /**\n   * Whether to start the ripple at the center (Web).\n   */\n  centered?: boolean;\n  /**\n   * Whether to prevent interaction with the touchable.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press. If not set, will cause the touchable to be disabled.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Color of the ripple effect (Android >= 5.0 and Web).\n   */\n  rippleColor?: string;\n  /**\n   * Color of the underlay for the highlight effect (Android < 5.0 and iOS).\n   */\n  underlayColor?: string;\n  /**\n   * Content of the `TouchableRipple`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * A wrapper for views that should respond to touches.\n * Provides a material \"ink ripple\" interaction effect for supported platforms (>= Android Lollipop).\n * On unsupported platforms, it falls back to a highlight effect.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Text, TouchableRipple } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <TouchableRipple\n *     onPress={() => console.log('Pressed')}\n *     rippleColor=\"rgba(0, 0, 0, .32)\"\n *   >\n *     <Text>Press me</Text>\n *   </TouchableRipple>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass TouchableRipple extends React.Component<Props> {\n  static defaultProps = {\n    borderless: false,\n  };\n\n  /**\n   * Whether ripple effect is supported.\n   */\n  static supported = true;\n\n  private handlePressIn = (e: any) => {\n    const { centered, rippleColor, onPressIn, theme } = this.props;\n\n    onPressIn?.(e);\n\n    const { dark, colors } = theme;\n    const calculatedRippleColor =\n      rippleColor ||\n      color(colors.text)\n        .alpha(dark ? 0.32 : 0.2)\n        .rgb()\n        .string();\n\n    const button = e.currentTarget;\n    const style = window.getComputedStyle(button);\n    const dimensions = button.getBoundingClientRect();\n\n    let touchX;\n    let touchY;\n\n    if (centered) {\n      touchX = dimensions.width / 2;\n      touchY = dimensions.height / 2;\n    } else {\n      const startX = e.nativeEvent.touches\n        ? e.nativeEvent.touches[0].pageX\n        : e.pageX;\n      const startY = e.nativeEvent.touches\n        ? e.nativeEvent.touches[0].pageY\n        : e.pageY;\n\n      touchX = startX - dimensions.left;\n      touchY = startY - dimensions.top;\n    }\n\n    // Get the size of the button to determine how big the ripple should be\n    const size = centered\n      ? // If ripple is always centered, we don't need to make it too big\n        Math.min(dimensions.width, dimensions.height) * 1.25\n      : // Otherwise make it twice as big so clicking on one end spreads ripple to other\n        Math.max(dimensions.width, dimensions.height) * 2;\n\n    // Create a container for our ripple effect so we don't need to change the parent's style\n    const container = document.createElement('span');\n\n    container.setAttribute('data-paper-ripple', '');\n\n    Object.assign(container.style, {\n      position: 'absolute',\n      pointerEvents: 'none',\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      borderTopLeftRadius: style.borderTopLeftRadius,\n      borderTopRightRadius: style.borderTopRightRadius,\n      borderBottomRightRadius: style.borderBottomRightRadius,\n      borderBottomLeftRadius: style.borderBottomLeftRadius,\n      overflow: centered ? 'visible' : 'hidden',\n    });\n\n    // Create span to show the ripple effect\n    const ripple = document.createElement('span');\n\n    Object.assign(ripple.style, {\n      position: 'absolute',\n      pointerEvents: 'none',\n      backgroundColor: calculatedRippleColor,\n      borderRadius: '50%',\n\n      /* Transition configuration */\n      transitionProperty: 'transform opacity',\n      transitionDuration: `${Math.min(size * 1.5, 350)}ms`,\n      transitionTimingFunction: 'linear',\n      transformOrigin: 'center',\n\n      /* We'll animate these properties */\n      transform: 'translate3d(-50%, -50%, 0) scale3d(0.1, 0.1, 0.1)',\n      opacity: '0.5',\n\n      // Position the ripple where cursor was\n      left: `${touchX}px`,\n      top: `${touchY}px`,\n      width: `${size}px`,\n      height: `${size}px`,\n    });\n\n    // Finally, append it to DOM\n    container.appendChild(ripple);\n    button.appendChild(container);\n\n    // rAF runs in the same frame as the event handler\n    // Use double rAF to ensure the transition class is added in next frame\n    // This will make sure that the transition animation is triggered\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        Object.assign(ripple.style, {\n          transform: 'translate3d(-50%, -50%, 0) scale3d(1, 1, 1)',\n          opacity: '1',\n        });\n      });\n    });\n  };\n\n  private handlePressOut = (e: any) => {\n    this.props.onPressOut && this.props.onPressOut(e);\n\n    const containers = e.currentTarget.querySelectorAll(\n      '[data-paper-ripple]'\n    ) as HTMLElement[];\n\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        containers.forEach(container => {\n          // @ts-ignore\n          const ripple = container.firstChild;\n\n          // @ts-ignore\n          Object.assign(ripple.style, {\n            transitionDuration: '250ms',\n            opacity: 0,\n          });\n\n          // Finally remove the span after the transition\n          setTimeout(() => {\n            // @ts-ignore\n            const { parentNode } = container;\n\n            if (parentNode) {\n              parentNode.removeChild(container);\n            }\n          }, 500);\n        });\n      });\n    });\n  };\n\n  render() {\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    const {\n      style,\n      background,\n      borderless,\n      disabled: disabledProp,\n      rippleColor,\n      underlayColor,\n      children,\n      theme,\n      ...rest\n    } = this.props;\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n\n    const disabled = disabledProp || !this.props.onPress;\n\n    return (\n      <TouchableWithoutFeedback\n        {...rest}\n        onPressIn={this.handlePressIn}\n        onPressOut={this.handlePressOut}\n        disabled={disabled}\n      >\n        <View\n          style={[styles.touchable, borderless && styles.borderless, style]}\n        >\n          {React.Children.only(children)}\n        </View>\n      </TouchableWithoutFeedback>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  touchable: {\n    position: 'relative',\n  },\n  borderless: {\n    overflow: 'hidden',\n  },\n});\n\nexport default withTheme(TouchableRipple);\n"]}