{"version":3,"sources":["MenuItem.tsx"],"names":["MenuItem","props","icon","title","disabled","onPress","theme","style","testID","titleStyle","disabledColor","dark","white","black","alpha","rgb","string","titleColor","colors","text","iconColor","styles","container","row","item","content","widthWithIcon","color","React","Component","minWidth","maxWidth","iconWidth","StyleSheet","create","paddingHorizontal","height","justifyContent","flexDirection","width","fontSize","marginHorizontal"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  TextStyle,\n  ViewStyle,\n  StyleProp,\n} from 'react-native';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { black, white } from '../../styles/colors';\nimport { Theme } from '../../types';\n\ntype Props = {\n  /**\n   * Title text for the `MenuItem`.\n   */\n  title: React.ReactNode;\n  /**\n   * Icon to display for the `MenuItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the 'item' is disabled. A disabled 'item' is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  style?: StyleProp<ViewStyle>;\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * A component to show a single list item inside a Menu.\n *\n */\n\nclass MenuItem extends React.Component<Props> {\n  static displayName = 'Menu.Item';\n\n  render() {\n    const {\n      icon,\n      title,\n      disabled,\n      onPress,\n      theme,\n      style,\n      testID,\n      titleStyle,\n    } = this.props;\n\n    const disabledColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n\n    const titleColor = disabled\n      ? disabledColor\n      : color(theme.colors.text)\n          .alpha(0.87)\n          .rgb()\n          .string();\n\n    const iconColor = disabled\n      ? disabledColor\n      : color(theme.colors.text)\n          .alpha(0.54)\n          .rgb()\n          .string();\n\n    return (\n      <TouchableRipple\n        style={[styles.container, style]}\n        onPress={onPress}\n        disabled={disabled}\n        testID={testID}\n      >\n        <View style={styles.row}>\n          {icon ? (\n            <View style={[styles.item, styles.icon]} pointerEvents=\"box-none\">\n              <Icon source={icon} size={24} color={iconColor} />\n            </View>\n          ) : null}\n          <View\n            style={[\n              styles.item,\n              styles.content,\n              icon ? styles.widthWithIcon : null,\n            ]}\n            pointerEvents=\"none\"\n          >\n            <Text\n              numberOfLines={1}\n              style={[styles.title, { color: titleColor }, titleStyle]}\n            >\n              {title}\n            </Text>\n          </View>\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst minWidth = 112;\nconst maxWidth = 280;\nconst iconWidth = 40;\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 8,\n    minWidth,\n    maxWidth,\n    height: 48,\n    justifyContent: 'center',\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  icon: {\n    width: iconWidth,\n  },\n  title: {\n    fontSize: 16,\n  },\n  item: {\n    marginHorizontal: 8,\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16,\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48),\n  },\n});\n\nexport default withTheme(MenuItem);\n\n// @component-docs ignore-next-line\nexport { MenuItem };\n"]}