{"version":3,"sources":["RadioButtonItem.tsx"],"names":["RadioButtonItem","props","value","label","style","labelStyle","onPress","disabled","color","uncheckedColor","status","colors","theme","context","undefined","onValueChange","styles","container","text","React","Component","StyleSheet","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","fontSize"],"mappings":"q1BAAA,oDACA,yCAQA,2CACA,oDACA,8BACA,2EACA,kEACA,gE,2GAgFMA,CAAAA,e,4WAGK,iBAYH,KAAKC,KAZF,CAELC,KAFK,aAELA,KAFK,CAGLC,KAHK,aAGLA,KAHK,CAILC,KAJK,aAILA,KAJK,CAKLC,UALK,aAKLA,UALK,CAMLC,OANK,aAMLA,OANK,CAOLC,QAPK,aAOLA,QAPK,CAQLC,KARK,aAQLA,KARK,CASLC,cATK,aASLA,cATK,CAULC,MAVK,aAULA,MAVK,CAWIC,MAXJ,aAWLC,KAXK,CAWID,MAXJ,CAcP,MACE,qBAAC,oCAAD,CAAoB,QAApB,mDACG,SAACE,OAAD,CAAsC,CACrC,MACE,qBAAC,wBAAD,EACE,OAAO,CACLN,QAAQ,CACJO,SADI,CAEJ,iBACE,uBAAY,CACVR,OAAO,CAAEA,OADC,CAEVS,aAAa,CAAEF,OAAF,SAAEA,OAAF,iBAAEA,OAAO,CAAEE,aAFd,CAGVb,KAAK,CAALA,KAHU,CAAZ,CADF,EAJR,kDAYE,oBAAC,iBAAD,EAAM,KAAK,CAAE,CAACc,MAAM,CAACC,SAAR,CAAmBb,KAAnB,CAAb,CAAwC,aAAa,CAAC,MAAtD,kDACE,oBAAC,aAAD,EACE,KAAK,CAAE,CAACY,MAAM,CAACb,KAAR,CAAe,CAAEK,KAAK,CAAEG,MAAM,CAACO,IAAhB,CAAf,CAAuCb,UAAvC,CADT,kDAGGF,KAHH,CADF,CAME,oBAAC,oBAAD,EACE,KAAK,CAAED,KADT,CAEE,QAAQ,CAAEK,QAFZ,CAGE,MAAM,CAAEG,MAHV,CAIE,KAAK,CAAEF,KAJT,CAKE,cAAc,CAAEC,cALlB,kDANF,CAZF,CADF,CA6BD,CA/BH,CADF,CAmCD,C,6BApD2BU,KAAK,CAACC,S,uEAA9BpB,e,eACiB,kB,eAsDR,uBAAUA,eAAV,C,0BAKf,GAAMgB,CAAAA,MAAM,CAAGK,wBAAWC,MAAX,CAAkB,CAC/BL,SAAS,CAAE,CACTM,aAAa,CAAE,KADN,CAETC,UAAU,CAAE,QAFH,CAGTC,cAAc,CAAE,eAHP,CAITC,eAAe,CAAE,CAJR,CAKTC,iBAAiB,CAAE,EALV,CADoB,CAQ/BxB,KAAK,CAAE,CACLyB,QAAQ,CAAE,EADL,CARwB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport { Theme } from '../../types';\nimport { withTheme } from '../../core/theming';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress } from './utils';\nimport TouchableRipple from '../TouchableRipple';\nimport RadioButton from './RadioButton';\nimport Text from '../Typography/Text';\n\nexport type Props = {\n  /**\n   * Value of the radio button.\n   */\n  value: string;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\n *     <figcaption>Pressed</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { RadioButton, Text } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     value: 'first',\n *   };\n *\n *   render() {\n *     return(\n *       <RadioButton.Group\n *         onValueChange={value => this.setState({ value })}\n *         value={this.state.value}\n *       >\n *           <RadioButton.Item label=\"First item\" value=\"first\" />\n *           <RadioButton.Item label=\"Second item\" value=\"second\" />\n *       </RadioButton.Group>\n *     )\n *   }\n * }\n *```\n */\nclass RadioButtonItem extends React.Component<Props> {\n  static displayName = 'RadioButton.Item';\n\n  render() {\n    const {\n      value,\n      label,\n      style,\n      labelStyle,\n      onPress,\n      disabled,\n      color,\n      uncheckedColor,\n      status,\n      theme: { colors },\n    } = this.props;\n\n    return (\n      <RadioButtonContext.Consumer>\n        {(context?: RadioButtonContextType) => {\n          return (\n            <TouchableRipple\n              onPress={\n                disabled\n                  ? undefined\n                  : () =>\n                      handlePress({\n                        onPress: onPress,\n                        onValueChange: context?.onValueChange,\n                        value,\n                      })\n              }\n            >\n              <View style={[styles.container, style]} pointerEvents=\"none\">\n                <Text\n                  style={[styles.label, { color: colors.text }, labelStyle]}\n                >\n                  {label}\n                </Text>\n                <RadioButton\n                  value={value}\n                  disabled={disabled}\n                  status={status}\n                  color={color}\n                  uncheckedColor={uncheckedColor}\n                />\n              </View>\n            </TouchableRipple>\n          );\n        }}\n      </RadioButtonContext.Consumer>\n    );\n  }\n}\n\nexport default withTheme(RadioButtonItem);\n\n// @component-docs ignore-next-line\nexport { RadioButtonItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n  },\n});\n"]}