{"version":3,"sources":["Modal.tsx"],"names":["DEFAULT_DURATION","Modal","opacity","Animated","Value","props","visible","rendered","dismissable","hideModal","BackHandler","removeEventListener","handleBack","addEventListener","state","scale","theme","animation","timing","toValue","duration","easing","Easing","out","cubic","useNativeDriver","start","finished","onDismiss","showModal","setState","prevProps","children","contentContainerStyle","colors","StyleSheet","absoluteFill","undefined","styles","backdrop","backgroundColor","wrapper","content","nextProps","prevState","React","Component","create","flex","absoluteFillObject","justifyContent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  BackHandler,\n  Easing,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  ViewStyle,\n} from 'react-native';\nimport SafeAreaView from 'react-native-safe-area-view';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\n\ntype Props = {\n  /**\n   * Determines whether clicking outside the modal dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the modal.\n   */\n  onDismiss?: () => void;\n  /**\n   * Determines Whether the modal is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Modal`.\n   */\n  children: React.ReactNode;\n  /**\n   * Style for the content of the modal\n   */\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  opacity: Animated.Value;\n  rendered: boolean;\n};\n\nconst DEFAULT_DURATION = 220;\n\n/**\n * The Modal component is a simple way to present content above an enclosing view.\n * To render the `Modal` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Modal, Portal, Text, Button, Provider } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     visible: false,\n *   };\n *\n *   _showModal = () => this.setState({ visible: true });\n *   _hideModal = () => this.setState({ visible: false });\n *\n *   render() {\n *     const { visible } = this.state;\n *     return (\n *       <Provider>\n *          <Portal>\n *            <Modal visible={visible} onDismiss={this._hideModal}>\n *              <Text>Example Modal</Text>\n *            </Modal>\n *            <Button\n *              style={{ marginTop: 30 }}\n *              onPress={this._showModal}\n *            >\n *              Show\n *            </Button>\n *          </Portal>\n *       </Provider>\n *     );\n *   }\n * }\n * ```\n */\n\nclass Modal extends React.Component<Props, State> {\n  static defaultProps = {\n    dismissable: true,\n    visible: false,\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    if (nextProps.visible && !prevState.rendered) {\n      return {\n        rendered: true,\n      };\n    }\n\n    return null;\n  }\n\n  state = {\n    opacity: new Animated.Value(this.props.visible ? 1 : 0),\n    rendered: this.props.visible,\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.visible !== this.props.visible) {\n      if (this.props.visible) {\n        this.showModal();\n      } else {\n        this.hideModal();\n      }\n    }\n  }\n\n  private handleBack = () => {\n    if (this.props.dismissable) {\n      this.hideModal();\n    }\n    return true;\n  };\n\n  private showModal = () => {\n    BackHandler.removeEventListener('hardwareBackPress', this.handleBack);\n    BackHandler.addEventListener('hardwareBackPress', this.handleBack);\n\n    const { opacity } = this.state;\n    const { scale } = this.props.theme.animation;\n\n    Animated.timing(opacity, {\n      toValue: 1,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true,\n    }).start();\n  };\n\n  private hideModal = () => {\n    BackHandler.removeEventListener('hardwareBackPress', this.handleBack);\n\n    const { opacity } = this.state;\n    const { scale } = this.props.theme.animation;\n\n    Animated.timing(opacity, {\n      toValue: 0,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (!finished) {\n        return;\n      }\n\n      if (this.props.visible && this.props.onDismiss) {\n        this.props.onDismiss();\n      }\n\n      if (this.props.visible) {\n        this.showModal();\n      } else {\n        this.setState({\n          rendered: false,\n        });\n      }\n    });\n  };\n\n  componentWillUnmount() {\n    BackHandler.removeEventListener('hardwareBackPress', this.handleBack);\n  }\n\n  render() {\n    const { rendered, opacity } = this.state;\n\n    if (!rendered) return null;\n\n    const { children, dismissable, theme, contentContainerStyle } = this.props;\n    const { colors } = theme;\n    return (\n      <Animated.View\n        pointerEvents={this.props.visible ? 'auto' : 'none'}\n        accessibilityViewIsModal\n        accessibilityLiveRegion=\"polite\"\n        style={StyleSheet.absoluteFill}\n      >\n        <TouchableWithoutFeedback\n          disabled={!dismissable}\n          onPress={dismissable ? this.hideModal : undefined}\n        >\n          <Animated.View\n            style={[\n              styles.backdrop,\n              { backgroundColor: colors.backdrop, opacity },\n            ]}\n          />\n        </TouchableWithoutFeedback>\n        <SafeAreaView style={styles.wrapper} pointerEvents=\"box-none\">\n          <Surface\n            style={\n              [{ opacity }, styles.content, contentContainerStyle] as StyleProp<\n                ViewStyle\n              >\n            }\n          >\n            {children}\n          </Surface>\n        </SafeAreaView>\n      </Animated.View>\n    );\n  }\n}\n\nexport default withTheme(Modal);\n\nconst styles = StyleSheet.create({\n  backdrop: {\n    flex: 1,\n  },\n  wrapper: {\n    ...StyleSheet.absoluteFillObject,\n    justifyContent: 'center',\n  },\n  content: {\n    backgroundColor: 'transparent',\n    justifyContent: 'center',\n  },\n});\n"]}