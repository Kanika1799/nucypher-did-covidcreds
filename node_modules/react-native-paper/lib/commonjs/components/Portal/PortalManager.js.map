{"version":3,"sources":["PortalManager.tsx"],"names":["PortalManager","portals","key","children","setState","state","map","item","filter","StyleSheet","absoluteFill","React","PureComponent"],"mappings":"6gCAAA,oDACA,yC,64BAYqBA,CAAAA,a,giBACJ,CACbC,OAAO,CAAE,EADI,C,kFAIP,SAACC,GAAD,CAAcC,QAAd,CAA4C,CAClD,MAAKC,QAAL,CAAc,SAAAC,KAAK,QAAK,CACtBJ,OAAO,2CAAMI,KAAK,CAACJ,OAAZ,GAAqB,CAAEC,GAAG,CAAHA,GAAF,CAAOC,QAAQ,CAARA,QAAP,CAArB,EADe,CAAL,EAAnB,EAGD,C,mFAEQ,SAACD,GAAD,CAAcC,QAAd,QACP,OAAKC,QAAL,CAAc,SAAAC,KAAK,QAAK,CACtBJ,OAAO,CAAEI,KAAK,CAACJ,OAAN,CAAcK,GAAd,CAAkB,SAAAC,IAAI,CAAI,CACjC,GAAIA,IAAI,CAACL,GAAL,GAAaA,GAAjB,CAAsB,CACpB,wBAAYK,IAAZ,EAAkBJ,QAAQ,CAARA,QAAlB,GACD,CACD,MAAOI,CAAAA,IAAP,CACD,CALQ,CADa,CAAL,EAAnB,CADO,E,oFAUC,SAACL,GAAD,QACR,OAAKE,QAAL,CAAc,SAAAC,KAAK,QAAK,CACtBJ,OAAO,CAAEI,KAAK,CAACJ,OAAN,CAAcO,MAAd,CAAqB,SAAAD,IAAI,QAAIA,CAAAA,IAAI,CAACL,GAAL,GAAaA,GAAjB,EAAzB,CADa,CAAL,EAAnB,CADQ,E,8FAKD,CACP,MAAO,MAAKG,KAAL,CAAWJ,OAAX,CAAmBK,GAAnB,CAAuB,kBAAGJ,CAAAA,GAAH,MAAGA,GAAH,CAAQC,QAAR,MAAQA,QAAR,OAC5B,qBAAC,iBAAD,EACE,GAAG,CAAED,GADP,CAEE,WAAW,CACT,KAHJ,CAKE,aAAa,CAAC,UALhB,CAME,KAAK,CAAEO,wBAAWC,YANpB,iDAQGP,QARH,CAD4B,EAAvB,CAAP,CAYD,C,2BAvCwCQ,KAAK,CAACC,a","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\n\ntype State = {\n  portals: Array<{\n    key: number;\n    children: React.ReactNode;\n  }>;\n};\n\n/**\n * Portal host is the component which actually renders all Portals.\n */\nexport default class PortalManager extends React.PureComponent<{}, State> {\n  state: State = {\n    portals: [],\n  };\n\n  mount = (key: number, children: React.ReactNode) => {\n    this.setState(state => ({\n      portals: [...state.portals, { key, children }],\n    }));\n  };\n\n  update = (key: number, children: React.ReactNode) =>\n    this.setState(state => ({\n      portals: state.portals.map(item => {\n        if (item.key === key) {\n          return { ...item, children };\n        }\n        return item;\n      }),\n    }));\n\n  unmount = (key: number) =>\n    this.setState(state => ({\n      portals: state.portals.filter(item => item.key !== key),\n    }));\n\n  render() {\n    return this.state.portals.map(({ key, children }) => (\n      <View\n        key={key}\n        collapsable={\n          false /* Need collapsable=false here to clip the elevations, otherwise they appear above sibling components */\n        }\n        pointerEvents=\"box-none\"\n        style={StyleSheet.absoluteFill}\n      >\n        {children}\n      </View>\n    ));\n  }\n}\n"]}