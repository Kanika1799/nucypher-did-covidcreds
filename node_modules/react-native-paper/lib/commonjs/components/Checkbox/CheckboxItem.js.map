{"version":3,"sources":["CheckboxItem.tsx"],"names":["CheckboxItem","props","style","status","label","onPress","labelStyle","colors","theme","styles","container","color","primary","React","Component","StyleSheet","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","fontSize"],"mappings":"khCAAA,oDAEA,yCAQA,4DACA,gEAEA,2EACA,2C,qGA+DMA,CAAAA,Y,6VAGK,iBASH,KAAKC,KATF,CAELC,KAFK,aAELA,KAFK,CAGLC,MAHK,aAGLA,MAHK,CAILC,KAJK,aAILA,KAJK,CAKLC,OALK,aAKLA,OALK,CAMLC,UANK,aAMLA,UANK,CAOIC,MAPJ,aAOLC,KAPK,CAOID,MAPJ,CAQFN,KARE,8GAWP,MACE,qBAAC,wBAAD,EAAiB,OAAO,CAAEI,OAA1B,iDACE,oBAAC,iBAAD,EAAM,KAAK,CAAE,CAACI,MAAM,CAACC,SAAR,CAAmBR,KAAnB,CAAb,CAAwC,aAAa,CAAC,MAAtD,iDACE,oBAAC,aAAD,EAAM,KAAK,CAAE,CAACO,MAAM,CAACL,KAAR,CAAeE,UAAf,CAA2B,CAAEK,KAAK,CAAEJ,MAAM,CAACK,OAAhB,CAA3B,CAAb,iDACGR,KADH,CADF,CAIE,oBAAC,iBAAD,wBAAU,MAAM,CAAED,MAAlB,EAA8BF,KAA9B,mDAJF,CADF,CADF,CAUD,C,0BAxBwBY,KAAK,CAACC,S,iEAA3Bd,Y,eACiB,e,eA0BR,uBAAUA,YAAV,C,0BAKf,GAAMS,CAAAA,MAAM,CAAGM,wBAAWC,MAAX,CAAkB,CAC/BN,SAAS,CAAE,CACTO,aAAa,CAAE,KADN,CAETC,UAAU,CAAE,QAFH,CAGTC,cAAc,CAAE,eAHP,CAITC,eAAe,CAAE,CAJR,CAKTC,iBAAiB,CAAE,EALV,CADoB,CAQ/BjB,KAAK,CAAE,CACLkB,QAAQ,CAAE,EADL,CARwB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\n\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport CheckBox from './Checkbox';\nimport Text from '../Typography/Text';\nimport { Theme } from '../../types';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox, Text } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *\n *   render() {\n *     return(\n *       <View>\n *           <Checkbox.Item label=\"Item\" status=\"checked\" />\n *       </View>\n *     )\n *   }\n * }\n *```\n */\n\nclass CheckboxItem extends React.Component<Props> {\n  static displayName = 'Checkbox.Item';\n\n  render() {\n    const {\n      style,\n      status,\n      label,\n      onPress,\n      labelStyle,\n      theme: { colors },\n      ...props\n    } = this.props;\n\n    return (\n      <TouchableRipple onPress={onPress}>\n        <View style={[styles.container, style]} pointerEvents=\"none\">\n          <Text style={[styles.label, labelStyle, { color: colors.primary }]}>\n            {label}\n          </Text>\n          <CheckBox status={status} {...props}></CheckBox>\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nexport default withTheme(CheckboxItem);\n\n// @component-docs ignore-next-line\nexport { CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n  },\n});\n"]}