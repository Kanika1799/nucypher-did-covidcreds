{"version":3,"sources":["CheckboxIOS.tsx"],"names":["CheckboxIOS","props","status","disabled","onPress","theme","rest","checked","indeterminate","checkedColor","colors","color","accent","rippleColor","text","alpha","rgb","string","fade","icon","styles","container","opacity","React","Component","StyleSheet","create","borderRadius","padding"],"mappings":"ihCAAA,oDACA,yCACA,oDACA,uFACA,2EACA,2C,oGAyCMA,CAAAA,W,wVAGK,iBAC+C,KAAKC,KADpD,CACCC,MADD,aACCA,MADD,CACSC,QADT,aACSA,QADT,CACmBC,OADnB,aACmBA,OADnB,CAC4BC,KAD5B,aAC4BA,KAD5B,CACsCC,IADtC,4FAEP,GAAMC,CAAAA,OAAO,CAAGL,MAAM,GAAK,SAA3B,CACA,GAAMM,CAAAA,aAAa,CAAGN,MAAM,GAAK,eAAjC,CAEA,GAAMO,CAAAA,YAAY,CAAGN,QAAQ,CACzBE,KAAK,CAACK,MAAN,CAAaP,QADY,CAEzB,KAAKF,KAAL,CAAWU,KAAX,EAAoBN,KAAK,CAACK,MAAN,CAAaE,MAFrC,CAIA,GAAIC,CAAAA,WAAJ,CAEA,GAAIV,QAAJ,CAAc,CACZU,WAAW,CAAG,mBAAMR,KAAK,CAACK,MAAN,CAAaI,IAAnB,EACXC,KADW,CACL,IADK,EAEXC,GAFW,GAGXC,MAHW,EAAd,CAID,CALD,IAKO,CACLJ,WAAW,CAAG,mBAAMJ,YAAN,EACXS,IADW,CACN,IADM,EAEXF,GAFW,GAGXC,MAHW,EAAd,CAID,CAED,GAAME,CAAAA,IAAI,CAAGX,aAAa,CAAG,OAAH,CAAa,OAAvC,CAEA,MACE,qBAAC,wBAAD,0BACMF,IADN,EAEE,UAAU,KAFZ,CAGE,WAAW,CAAEO,WAHf,CAIE,OAAO,CAAET,OAJX,CAKE,QAAQ,CAAED,QALZ,CAME,mBAAmB,CAAEA,QAAQ,CAAG,CAAC,QAAD,CAAW,UAAX,CAAH,CAA4B,QAN3D,CAOE,0BAA0B,CAAC,QAP7B,CAQE,iBAAiB,CAAC,QARpB,CASE,mBAAmB,CAAEA,QAAQ,CAAG,CAAC,UAAD,CAAH,CAAkB,EATjD,CAUE,uBAAuB,CAAC,QAV1B,CAWE,KAAK,CAAEiB,MAAM,CAACC,SAXhB,kDAaE,oBAAC,iBAAD,EAAM,KAAK,CAAE,CAAEC,OAAO,CAAEd,aAAa,EAAID,OAAjB,CAA2B,CAA3B,CAA+B,CAA1C,CAAb,iDACE,oBAAC,8BAAD,EACE,gBAAgB,CAAE,KADpB,CAEE,IAAI,CAAEY,IAFR,CAGE,IAAI,CAAE,EAHR,CAIE,KAAK,CAAEV,YAJT,CAKE,SAAS,CAAC,KALZ,iDADF,CAbF,CADF,CAyBD,C,yBArDuBc,KAAK,CAACC,S,+DAA1BxB,W,eACiB,c,EAuDvB,GAAMoB,CAAAA,MAAM,CAAGK,wBAAWC,MAAX,CAAkB,CAC/BL,SAAS,CAAE,CACTM,YAAY,CAAE,EADL,CAETC,OAAO,CAAE,CAFA,CADoB,CAAlB,CAAf,C,aAOe,uBAAU5B,WAAV,C","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport { Theme, $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for iOS.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass CheckboxIOS extends React.Component<Props> {\n  static displayName = 'Checkbox.IOS';\n\n  render() {\n    const { status, disabled, onPress, theme, ...rest } = this.props;\n    const checked = status === 'checked';\n    const indeterminate = status === 'indeterminate';\n\n    const checkedColor = disabled\n      ? theme.colors.disabled\n      : this.props.color || theme.colors.accent;\n\n    let rippleColor;\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text)\n        .alpha(0.16)\n        .rgb()\n        .string();\n    } else {\n      rippleColor = color(checkedColor)\n        .fade(0.32)\n        .rgb()\n        .string();\n    }\n\n    const icon = indeterminate ? 'minus' : 'check';\n\n    return (\n      <TouchableRipple\n        {...rest}\n        borderless\n        rippleColor={rippleColor}\n        onPress={onPress}\n        disabled={disabled}\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityStates={disabled ? ['disabled'] : []}\n        accessibilityLiveRegion=\"polite\"\n        style={styles.container}\n      >\n        <View style={{ opacity: indeterminate || checked ? 1 : 0 }}>\n          <MaterialCommunityIcon\n            allowFontScaling={false}\n            name={icon}\n            size={24}\n            color={checkedColor}\n            direction=\"ltr\"\n          />\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(CheckboxIOS);\n\n// @component-docs ignore-next-line\nexport { CheckboxIOS };\n"]}