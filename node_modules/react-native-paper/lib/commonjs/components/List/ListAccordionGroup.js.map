{"version":3,"sources":["ListAccordionGroup.tsx"],"names":["ListAccordionGroupContext","React","createContext","ListAccordionGroup","expandedId","undefined","setState","currentExpandedId","props","onAccordionPress","children","state","Component"],"mappings":"28BAAA,oD,oGAsBO,GAAMA,CAAAA,yBAAyB,CAAGC,KAAK,CAACC,aAAN,CAEvC,IAFuC,CAAlC,C,+DA6CDC,CAAAA,kB,4iBAGW,CACbC,UAAU,CAAEC,SADC,C,6FAII,SAACD,UAAD,CAAiC,CAClD,MAAKE,QAAL,CAAc,kBAAeC,CAAAA,iBAAf,MAAGH,UAAH,OAAwC,CACpDA,UAAU,CAAEG,iBAAiB,GAAKH,UAAtB,CAAmCC,SAAnC,CAA+CD,UADP,CAAxC,EAAd,EAGD,C,mGAEQ,iBAC4C,KAAKI,KADjD,CACCJ,UADD,aACCA,UADD,CACaK,gBADb,aACaA,gBADb,CAC+BC,QAD/B,aAC+BA,QAD/B,CAGP,MACE,qBAAC,yBAAD,CAA2B,QAA3B,EACE,KAAK,CAAE,CACLN,UAAU,CAAEA,UAAU,EAAI,KAAKO,KAAL,CAAWP,UADhC,CAELK,gBAAgB,CAAEA,gBAAgB,EAAI,KAAKA,gBAFtC,CADT,iDAMGC,QANH,CADF,CAUD,C,gCA1B8BT,KAAK,CAACW,S,+BAAjCT,kB,eACiB,qB,eA4BRA,kB","sourcesContent":["import * as React from 'react';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onAccordionPress?: (expandedId: string | number) => void;\n  /**\n   * Id of the currently expanded list accordion\n   */\n  expandedId?: string | number;\n  /**\n   * React elements containing list accordions\n   */\n  children: React.ReactNode;\n};\n\nexport type ListAccordionGroupContextType = {\n  expandedId: string | number | undefined;\n  onAccordionPress: (expandedId: string | number) => void;\n} | null;\n\nexport const ListAccordionGroupContext = React.createContext<\n  ListAccordionGroupContextType\n>(null);\n\ntype State = {\n  expandedId: string | number | undefined;\n};\n\n/**\n * List.AccordionGroup allows to control a group of List Accordions. Id prop for List.Accordion is required in order to group to work.\n * List.AccordionGroup can be controlled or uncontrolled component. Example shows uncontrolled version.\n * At most one Accordion will be expanded in given time.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-group.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, Text } from 'react-native';\n * import { List } from 'react-native-paper';\n *\n * function MyComponent() {\n *  return (\n *   <List.AccordionGroup>\n *     <List.Accordion title=\"Accordion 1\" id=\"1\">\n *       <List.Item title=\"Item 1\" />\n *     </List.Accordion>\n *     <List.Accordion title=\"Accordion 2\" id=\"2\">\n *       <List.Item title=\"Item 2\" />\n *     </List.Accordion>\n *     <View>\n *       <Text>\n *         List.Accordion can be wrapped because implementation uses React.Context.\n *       </Text>\n *       <List.Accordion title=\"Accordion 3\" id=\"3\">\n *         <List.Item title=\"Item 3\" />\n *       </List.Accordion>\n *     </View>\n *   </List.AccordionGroup>\n *  );\n * }\n *```\n */\nclass ListAccordionGroup extends React.Component<Props, State> {\n  static displayName = 'List.AccordionGroup';\n\n  state: State = {\n    expandedId: undefined,\n  };\n\n  onAccordionPress = (expandedId: string | number) => {\n    this.setState(({ expandedId: currentExpandedId }) => ({\n      expandedId: currentExpandedId === expandedId ? undefined : expandedId,\n    }));\n  };\n\n  render() {\n    const { expandedId, onAccordionPress, children } = this.props;\n\n    return (\n      <ListAccordionGroupContext.Provider\n        value={{\n          expandedId: expandedId || this.state.expandedId, // component can be controlled or uncontrolled\n          onAccordionPress: onAccordionPress || this.onAccordionPress,\n        }}\n      >\n        {children}\n      </ListAccordionGroupContext.Provider>\n    );\n  }\n}\n\nexport default ListAccordionGroup;\n"]}