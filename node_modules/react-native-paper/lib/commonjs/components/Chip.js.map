{"version":3,"sources":["Chip.tsx"],"names":["Chip","elevation","Animated","Value","scale","props","theme","animation","timing","state","toValue","duration","useNativeDriver","start","mode","children","icon","avatar","selected","disabled","accessibilityLabel","onPress","onLongPress","onClose","textStyle","style","testID","selectedColor","rest","dark","colors","StyleSheet","flatten","backgroundColor","surface","borderRadius","borderColor","undefined","white","black","alpha","rgb","string","textColor","text","iconColor","selectedBackgroundColor","lighten","darken","underlayColor","fade","accessibilityTraits","accessibilityStates","push","styles","container","Platform","OS","handlePressIn","handlePressOut","content","avatarWrapper","opacity","React","isValidElement","cloneElement","avatarSelected","fonts","regular","color","marginRight","marginLeft","Component","create","borderWidth","hairlineWidth","borderStyle","flexDirection","alignItems","paddingHorizontal","padding","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","position","top","left"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  AccessibilityTrait,\n  Animated,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport { Theme } from '../types';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   */\n  selectedColor?: string;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: any;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n};\n\ntype State = {\n  elevation: Animated.Value;\n};\n\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Chip extends React.Component<Props, State> {\n  static defaultProps: Partial<Props> = {\n    mode: 'flat',\n    disabled: false,\n    selected: false,\n  };\n\n  state = {\n    elevation: new Animated.Value(0),\n  };\n\n  private handlePressIn = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.elevation, {\n      toValue: 4,\n      duration: 200 * scale,\n      useNativeDriver: false,\n    }).start();\n  };\n\n  private handlePressOut = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.elevation, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: false,\n    }).start();\n  };\n\n  render() {\n    const {\n      mode,\n      children,\n      icon,\n      avatar,\n      selected,\n      disabled,\n      accessibilityLabel,\n      onPress,\n      onLongPress,\n      onClose,\n      textStyle,\n      style,\n      theme,\n      testID,\n      selectedColor,\n      ...rest\n    } = this.props;\n    const { dark, colors } = theme;\n\n    const {\n      backgroundColor = mode === 'outlined'\n        ? colors.surface\n        : dark\n        ? '#383838'\n        : '#ebebeb',\n      borderRadius = 16,\n    } = StyleSheet.flatten(style) || {};\n\n    const borderColor =\n      mode === 'outlined'\n        ? color(\n            selectedColor !== undefined\n              ? selectedColor\n              : color(dark ? white : black)\n          )\n            .alpha(0.29)\n            .rgb()\n            .string()\n        : backgroundColor;\n    const textColor = disabled\n      ? colors.disabled\n      : color(selectedColor !== undefined ? selectedColor : colors.text)\n          .alpha(0.87)\n          .rgb()\n          .string();\n    const iconColor = disabled\n      ? colors.disabled\n      : color(selectedColor !== undefined ? selectedColor : colors.text)\n          .alpha(0.54)\n          .rgb()\n          .string();\n    const selectedBackgroundColor = (dark\n      ? color(backgroundColor).lighten(mode === 'outlined' ? 0.2 : 0.4)\n      : color(backgroundColor).darken(mode === 'outlined' ? 0.08 : 0.2)\n    )\n      .rgb()\n      .string();\n\n    const underlayColor = selectedColor\n      ? color(selectedColor)\n          .fade(0.5)\n          .rgb()\n          .string()\n      : selectedBackgroundColor;\n\n    const accessibilityTraits: AccessibilityTrait[] = ['button'];\n    const accessibilityStates: AccessibilityState[] = [];\n\n    if (selected) {\n      accessibilityTraits.push('selected');\n      accessibilityStates.push('selected');\n    }\n\n    if (disabled) {\n      accessibilityTraits.push('disabled');\n      accessibilityStates.push('disabled');\n    }\n\n    return (\n      <Surface\n        style={\n          [\n            styles.container,\n            {\n              elevation: Platform.OS === 'android' ? this.state.elevation : 0,\n              backgroundColor: selected\n                ? selectedBackgroundColor\n                : backgroundColor,\n              borderColor,\n              borderRadius,\n            },\n            style,\n          ] as StyleProp<ViewStyle>\n        }\n        {...rest}\n      >\n        <TouchableRipple\n          borderless\n          delayPressIn={0}\n          style={{ borderRadius }}\n          onPress={onPress}\n          onLongPress={onLongPress}\n          onPressIn={this.handlePressIn}\n          onPressOut={this.handlePressOut}\n          underlayColor={underlayColor}\n          disabled={disabled}\n          accessibilityLabel={accessibilityLabel}\n          accessibilityTraits={accessibilityTraits}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityStates={accessibilityStates}\n          testID={testID}\n        >\n          <View style={styles.content}>\n            {avatar && !icon ? (\n              <View\n                style={[styles.avatarWrapper, disabled && { opacity: 0.26 }]}\n              >\n                {React.isValidElement(avatar)\n                  ? /* $FlowFixMe */\n                    React.cloneElement(avatar, {\n                      /* $FlowFixMe */\n                      style: [styles.avatar, avatar.props.style],\n                    })\n                  : avatar}\n              </View>\n            ) : null}\n            {icon || selected ? (\n              <View\n                style={[\n                  styles.icon,\n                  avatar ? [styles.avatar, styles.avatarSelected] : null,\n                ]}\n              >\n                <Icon\n                  source={icon || 'check'}\n                  color={avatar ? white : iconColor}\n                  size={18}\n                />\n              </View>\n            ) : null}\n            <Text\n              numberOfLines={1}\n              style={[\n                styles.text,\n                {\n                  ...theme.fonts.regular,\n                  color: textColor,\n                  marginRight: onClose ? 4 : 8,\n                  marginLeft: avatar || icon || selected ? 4 : 8,\n                },\n                textStyle,\n              ]}\n            >\n              {children}\n            </Text>\n            {onClose ? (\n              <TouchableWithoutFeedback\n                onPress={onClose}\n                accessibilityTraits=\"button\"\n                accessibilityComponentType=\"button\"\n              >\n                <View style={styles.icon}>\n                  <Icon source=\"close-circle\" size={16} color={iconColor} />\n                </View>\n              </TouchableWithoutFeedback>\n            ) : null}\n          </View>\n        </TouchableRipple>\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n  },\n  icon: {\n    padding: 4,\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n});\n\nexport default withTheme(Chip);\n"]}