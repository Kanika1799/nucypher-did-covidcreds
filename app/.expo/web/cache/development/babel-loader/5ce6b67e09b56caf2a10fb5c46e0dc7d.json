{"ast":null,"code":"import * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { NavigationContext, NavigationRouteContext } from '@react-navigation/native';\nimport Header from \"./Header\";\nimport { forSlideLeft, forSlideUp, forNoAnimation, forSlideRight } from \"../../TransitionConfigs/HeaderStyleInterpolators\";\nimport HeaderShownContext from \"../../utils/HeaderShownContext\";\nexport default function HeaderContainer(_ref) {\n  var mode = _ref.mode,\n      scenes = _ref.scenes,\n      layout = _ref.layout,\n      insets = _ref.insets,\n      getFocusedRoute = _ref.getFocusedRoute,\n      getPreviousRoute = _ref.getPreviousRoute,\n      onContentHeightChange = _ref.onContentHeightChange,\n      gestureDirection = _ref.gestureDirection,\n      styleInterpolator = _ref.styleInterpolator,\n      style = _ref.style;\n  var focusedRoute = getFocusedRoute();\n  var isParentHeaderShown = React.useContext(HeaderShownContext);\n  return React.createElement(View, {\n    pointerEvents: \"box-none\",\n    style: style\n  }, scenes.slice(-3).map(function (scene, i, self) {\n    if (mode === 'screen' && i !== self.length - 1 || !scene) {\n      return null;\n    }\n\n    var _ref2 = scene.descriptor.options || {},\n        header = _ref2.header,\n        _ref2$headerShown = _ref2.headerShown,\n        headerShown = _ref2$headerShown === void 0 ? isParentHeaderShown === false : _ref2$headerShown,\n        headerTransparent = _ref2.headerTransparent;\n\n    if (!headerShown) {\n      return null;\n    }\n\n    var isFocused = focusedRoute.key === scene.route.key;\n    var previousRoute = getPreviousRoute({\n      route: scene.route\n    });\n    var previous;\n\n    if (previousRoute) {\n      for (var j = i - 1; j >= 0; j--) {\n        var s = self[j];\n\n        if (s && s.route.key === previousRoute.key) {\n          previous = s;\n          break;\n        }\n      }\n    }\n\n    var previousScene = self[i - 1];\n    var nextScene = self[i + 1];\n\n    var _ref3 = (previousScene === null || previousScene === void 0 ? void 0 : previousScene.descriptor.options) || {},\n        _ref3$headerShown = _ref3.headerShown,\n        previousHeaderShown = _ref3$headerShown === void 0 ? isParentHeaderShown === false : _ref3$headerShown;\n\n    var _ref4 = (nextScene === null || nextScene === void 0 ? void 0 : nextScene.descriptor.options) || {},\n        _ref4$headerShown = _ref4.headerShown,\n        nextHeaderShown = _ref4$headerShown === void 0 ? isParentHeaderShown === false : _ref4$headerShown;\n\n    var isHeaderStatic = previousHeaderShown === false && !nextScene || nextHeaderShown === false;\n    var props = {\n      mode: mode,\n      layout: layout,\n      insets: insets,\n      scene: scene,\n      previous: previous,\n      navigation: scene.descriptor.navigation,\n      styleInterpolator: mode === 'float' ? isHeaderStatic ? gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? forSlideUp : gestureDirection === 'horizontal-inverted' ? forSlideRight : forSlideLeft : styleInterpolator : forNoAnimation\n    };\n    return React.createElement(NavigationContext.Provider, {\n      key: scene.route.key,\n      value: scene.descriptor.navigation\n    }, React.createElement(NavigationRouteContext.Provider, {\n      value: scene.route\n    }, React.createElement(View, {\n      onLayout: onContentHeightChange ? function (e) {\n        return onContentHeightChange({\n          route: scene.route,\n          height: e.nativeEvent.layout.height\n        });\n      } : undefined,\n      pointerEvents: isFocused ? 'box-none' : 'none',\n      accessibilityElementsHidden: !isFocused,\n      importantForAccessibility: isFocused ? 'auto' : 'no-hide-descendants',\n      style: mode === 'float' && !isFocused || headerTransparent ? styles.header : null\n    }, header !== undefined ? header(props) : React.createElement(Header, props))));\n  }));\n}\nvar styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  }\n});","map":{"version":3,"sources":["HeaderContainer.tsx"],"names":["style","focusedRoute","getFocusedRoute","isParentHeaderShown","React","mode","i","self","headerShown","headerTransparent","scene","isFocused","previousRoute","getPreviousRoute","route","j","s","previous","previousScene","nextScene","previousHeaderShown","nextHeaderShown","isHeaderStatic","props","layout","insets","navigation","styleInterpolator","gestureDirection","forNoAnimation","onContentHeightChange","e","height","styles","header","position","top","left","right"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport {\n  NavigationContext,\n  NavigationRouteContext,\n  Route,\n  ParamListBase,\n} from '@react-navigation/native';\nimport { EdgeInsets } from 'react-native-safe-area-context';\n\nimport Header from './Header';\nimport {\n  forSlideLeft,\n  forSlideUp,\n  forNoAnimation,\n  forSlideRight,\n} from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\nimport {\n  Layout,\n  Scene,\n  StackHeaderStyleInterpolator,\n  StackNavigationProp,\n  GestureDirection,\n} from '../../types';\n\nexport type Props = {\n  mode: 'float' | 'screen';\n  layout: Layout;\n  insets: EdgeInsets;\n  scenes: (Scene<Route<string>> | undefined)[];\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getFocusedRoute: () => Route<string>;\n  onContentHeightChange?: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  styleInterpolator: StackHeaderStyleInterpolator;\n  gestureDirection: GestureDirection;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function HeaderContainer({\n  mode,\n  scenes,\n  layout,\n  insets,\n  getFocusedRoute,\n  getPreviousRoute,\n  onContentHeightChange,\n  gestureDirection,\n  styleInterpolator,\n  style,\n}: Props) {\n  const focusedRoute = getFocusedRoute();\n  const isParentHeaderShown = React.useContext(HeaderShownContext);\n\n  return (\n    <View pointerEvents=\"box-none\" style={style}>\n      {scenes.slice(-3).map((scene, i, self) => {\n        if ((mode === 'screen' && i !== self.length - 1) || !scene) {\n          return null;\n        }\n\n        const {\n          header,\n          headerShown = isParentHeaderShown === false,\n          headerTransparent,\n        } = scene.descriptor.options || {};\n\n        if (!headerShown) {\n          return null;\n        }\n\n        const isFocused = focusedRoute.key === scene.route.key;\n        const previousRoute = getPreviousRoute({ route: scene.route });\n\n        let previous;\n\n        if (previousRoute) {\n          // The previous scene will be shortly before the current scene in the array\n          // So loop back from current index to avoid looping over the full array\n          for (let j = i - 1; j >= 0; j--) {\n            const s = self[j];\n\n            if (s && s.route.key === previousRoute.key) {\n              previous = s;\n              break;\n            }\n          }\n        }\n\n        // If the screen is next to a headerless screen, we need to make the header appear static\n        // This makes the header look like it's moving with the screen\n        const previousScene = self[i - 1];\n        const nextScene = self[i + 1];\n\n        const {\n          headerShown: previousHeaderShown = isParentHeaderShown === false,\n        } = previousScene?.descriptor.options || {};\n\n        const { headerShown: nextHeaderShown = isParentHeaderShown === false } =\n          nextScene?.descriptor.options || {};\n\n        const isHeaderStatic =\n          (previousHeaderShown === false &&\n            // We still need to animate when coming back from next scene\n            // A hacky way to check this is if the next scene exists\n            !nextScene) ||\n          nextHeaderShown === false;\n\n        const props = {\n          mode,\n          layout,\n          insets,\n          scene,\n          previous,\n          navigation: scene.descriptor.navigation as StackNavigationProp<\n            ParamListBase\n          >,\n          styleInterpolator:\n            mode === 'float'\n              ? isHeaderStatic\n                ? gestureDirection === 'vertical' ||\n                  gestureDirection === 'vertical-inverted'\n                  ? forSlideUp\n                  : gestureDirection === 'horizontal-inverted'\n                  ? forSlideRight\n                  : forSlideLeft\n                : styleInterpolator\n              : forNoAnimation,\n        };\n\n        return (\n          <NavigationContext.Provider\n            key={scene.route.key}\n            value={scene.descriptor.navigation}\n          >\n            <NavigationRouteContext.Provider value={scene.route}>\n              <View\n                onLayout={\n                  onContentHeightChange\n                    ? (e) =>\n                        onContentHeightChange({\n                          route: scene.route,\n                          height: e.nativeEvent.layout.height,\n                        })\n                    : undefined\n                }\n                pointerEvents={isFocused ? 'box-none' : 'none'}\n                accessibilityElementsHidden={!isFocused}\n                importantForAccessibility={\n                  isFocused ? 'auto' : 'no-hide-descendants'\n                }\n                style={\n                  // Avoid positioning the focused header absolutely\n                  // Otherwise accessibility tools don't seem to be able to find it\n                  (mode === 'float' && !isFocused) || headerTransparent\n                    ? styles.header\n                    : null\n                }\n              >\n                {header !== undefined ? header(props) : <Header {...props} />}\n              </View>\n            </NavigationRouteContext.Provider>\n          </NavigationContext.Provider>\n        );\n      })}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}