{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { MaybeScreenContainer, MaybeScreen } from \"../Screens\";\nimport { getDefaultHeaderHeight } from \"../Header/HeaderSegment\";\nimport CardContainer from \"./CardContainer\";\nimport { DefaultTransition, ModalTransition } from \"../../TransitionConfigs/TransitionPresets\";\nimport { forNoAnimation as forNoAnimationHeader } from \"../../TransitionConfigs/HeaderStyleInterpolators\";\nimport { forNoAnimation as forNoAnimationCard } from \"../../TransitionConfigs/CardStyleInterpolators\";\nimport HeaderShownContext from \"../../utils/HeaderShownContext\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nvar EPSILON = 0.01;\nvar FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\n\nvar getHeaderHeights = function getHeaderHeights(routes, insets, descriptors, layout, previous) {\n  return routes.reduce(function (acc, curr) {\n    var _ref = descriptors[curr.key] || {},\n        _ref$options = _ref.options,\n        options = _ref$options === void 0 ? {} : _ref$options;\n\n    var style = StyleSheet.flatten(options.headerStyle || {});\n    var height = typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    var safeAreaInsets = _objectSpread(_objectSpread({}, insets), options.safeAreaInsets);\n\n    var _options$headerStatus = options.headerStatusBarHeight,\n        headerStatusBarHeight = _options$headerStatus === void 0 ? safeAreaInsets.top : _options$headerStatus;\n    acc[curr.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\n\nvar getDistanceFromOptions = function getDistanceFromOptions(mode, layout, descriptor) {\n  var _ref2 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n      _ref2$gestureDirectio = _ref2.gestureDirection,\n      gestureDirection = _ref2$gestureDirectio === void 0 ? mode === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection : _ref2$gestureDirectio;\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nvar getProgressFromGesture = function getProgressFromGesture(mode, gesture, layout, descriptor) {\n  var distance = getDistanceFromOptions(mode, {\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\n\nvar CardStack = function (_React$Component) {\n  _inherits(CardStack, _React$Component);\n\n  var _super = _createSuper(CardStack);\n\n  _createClass(CardStack, null, [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.routes === state.routes && props.descriptors === state.descriptors) {\n        return null;\n      }\n\n      var gestures = props.routes.reduce(function (acc, curr) {\n        var descriptor = props.descriptors[curr.key];\n\n        var _ref3 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n            animationEnabled = _ref3.animationEnabled;\n\n        acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(props.mode, state.layout, descriptor) : 0);\n        return acc;\n      }, {});\n      return {\n        routes: props.routes,\n        scenes: props.routes.map(function (route, index, self) {\n          var previousRoute = self[index - 1];\n          var nextRoute = self[index + 1];\n          var oldScene = state.scenes[index];\n          var currentGesture = gestures[route.key];\n          var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n          var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n          var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n          var nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n          var previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n          var scene = {\n            route: route,\n            descriptor: descriptor,\n            progress: {\n              current: getProgressFromGesture(props.mode, currentGesture, state.layout, descriptor),\n              next: nextGesture ? getProgressFromGesture(props.mode, nextGesture, state.layout, nextDescriptor) : undefined,\n              previous: previousGesture ? getProgressFromGesture(props.mode, previousGesture, state.layout, previousDescriptor) : undefined\n            },\n            __memo: [route, state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n          };\n\n          if (oldScene && scene.__memo.every(function (it, i) {\n            return oldScene.__memo[i] === it;\n          })) {\n            return oldScene;\n          }\n\n          return scene;\n        }),\n        gestures: gestures,\n        descriptors: props.descriptors,\n        headerHeights: getHeaderHeights(props.routes, props.insets, state.descriptors, state.layout, state.headerHeights)\n      };\n    }\n  }]);\n\n  function CardStack(_props) {\n    var _this;\n\n    _classCallCheck(this, CardStack);\n\n    _this = _super.call(this, _props);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleLayout\", function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          height = _e$nativeEvent$layout.height,\n          width = _e$nativeEvent$layout.width;\n      var layout = {\n        width: width,\n        height: height\n      };\n\n      _this.setState(function (state, props) {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n\n        return {\n          layout: layout,\n          headerHeights: getHeaderHeights(props.routes, props.insets, state.descriptors, layout, state.headerHeights)\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleHeaderLayout\", function (_ref4) {\n      var route = _ref4.route,\n          height = _ref4.height;\n\n      _this.setState(function (_ref5) {\n        var headerHeights = _ref5.headerHeights;\n        var previousHeight = headerHeights[route.key];\n\n        if (previousHeight === height) {\n          return null;\n        }\n\n        return {\n          headerHeights: _objectSpread(_objectSpread({}, headerHeights), {}, _defineProperty2({}, route.key, height))\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getFocusedRoute\", function () {\n      var state = _this.props.state;\n      return state.routes[state.index];\n    });\n\n    var _Dimensions$get = Dimensions.get('window'),\n        _Dimensions$get$heigh = _Dimensions$get.height,\n        _height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh,\n        _Dimensions$get$width = _Dimensions$get.width,\n        _width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width;\n\n    _this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: {\n        height: _height,\n        width: _width\n      },\n      descriptors: _this.props.descriptors,\n      headerHeights: {}\n    };\n    return _this;\n  }\n\n  _createClass(CardStack, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          mode = _this$props.mode,\n          insets = _this$props.insets,\n          descriptors = _this$props.descriptors,\n          state = _this$props.state,\n          routes = _this$props.routes,\n          closingRouteKeys = _this$props.closingRouteKeys,\n          onOpenRoute = _this$props.onOpenRoute,\n          onCloseRoute = _this$props.onCloseRoute,\n          getPreviousRoute = _this$props.getPreviousRoute,\n          getGesturesEnabled = _this$props.getGesturesEnabled,\n          renderHeader = _this$props.renderHeader,\n          renderScene = _this$props.renderScene,\n          headerMode = _this$props.headerMode,\n          onTransitionStart = _this$props.onTransitionStart,\n          onTransitionEnd = _this$props.onTransitionEnd,\n          onPageChangeStart = _this$props.onPageChangeStart,\n          onPageChangeConfirm = _this$props.onPageChangeConfirm,\n          onPageChangeCancel = _this$props.onPageChangeCancel;\n      var _this$state = this.state,\n          scenes = _this$state.scenes,\n          layout = _this$state.layout,\n          gestures = _this$state.gestures,\n          headerHeights = _this$state.headerHeights;\n      var focusedRoute = state.routes[state.index];\n      var focusedDescriptor = descriptors[focusedRoute.key];\n      var focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n      var defaultTransitionPreset = mode === 'modal' ? ModalTransition : DefaultTransition;\n\n      if (headerMode === 'screen') {\n        defaultTransitionPreset = _objectSpread(_objectSpread({}, defaultTransitionPreset), {}, {\n          headerStyleInterpolator: forNoAnimationHeader\n        });\n      }\n\n      var _ref6 = focusedOptions.safeAreaInsets || {},\n          _ref6$top = _ref6.top,\n          top = _ref6$top === void 0 ? insets.top : _ref6$top,\n          _ref6$right = _ref6.right,\n          right = _ref6$right === void 0 ? insets.right : _ref6$right,\n          _ref6$bottom = _ref6.bottom,\n          bottom = _ref6$bottom === void 0 ? insets.bottom : _ref6$bottom,\n          _ref6$left = _ref6.left,\n          left = _ref6$left === void 0 ? insets.left : _ref6$left;\n\n      var isScreensEnabled = Platform.OS !== 'ios' && mode !== 'modal';\n      return React.createElement(HeaderShownContext.Consumer, null, function (isParentHeaderShown) {\n        var isFloatHeaderAbsolute = headerMode === 'float' ? _this2.state.scenes.slice(-2).some(function (scene) {\n          var descriptor = scene.descriptor;\n          var options = descriptor ? descriptor.options : {};\n          var headerTransparent = options.headerTransparent,\n              _options$headerShown = options.headerShown,\n              headerShown = _options$headerShown === void 0 ? isParentHeaderShown === false : _options$headerShown;\n\n          if (headerTransparent || headerShown === false) {\n            return true;\n          }\n\n          return false;\n        }) : false;\n        var floatingHeader = headerMode === 'float' ? React.createElement(React.Fragment, {\n          key: \"header\"\n        }, renderHeader({\n          mode: 'float',\n          layout: layout,\n          insets: {\n            top: top,\n            right: right,\n            bottom: bottom,\n            left: left\n          },\n          scenes: scenes,\n          getPreviousRoute: getPreviousRoute,\n          getFocusedRoute: _this2.getFocusedRoute,\n          onContentHeightChange: _this2.handleHeaderLayout,\n          gestureDirection: focusedOptions.gestureDirection !== undefined ? focusedOptions.gestureDirection : defaultTransitionPreset.gestureDirection,\n          styleInterpolator: focusedOptions.headerStyleInterpolator !== undefined ? focusedOptions.headerStyleInterpolator : defaultTransitionPreset.headerStyleInterpolator,\n          style: [styles.floating, isFloatHeaderAbsolute && styles.absolute]\n        })) : null;\n        return React.createElement(React.Fragment, null, isFloatHeaderAbsolute ? null : floatingHeader, React.createElement(MaybeScreenContainer, {\n          enabled: isScreensEnabled,\n          style: styles.container,\n          onLayout: _this2.handleLayout\n        }, routes.map(function (route, index, self) {\n          var focused = focusedRoute.key === route.key;\n          var gesture = gestures[route.key];\n          var scene = scenes[index];\n          var isScreenActive = scene.progress.next ? scene.progress.next.interpolate({\n            inputRange: [0, 1 - EPSILON, 1],\n            outputRange: [1, 1, 0],\n            extrapolate: 'clamp'\n          }) : 1;\n\n          var _ref7 = scene.descriptor ? scene.descriptor.options : {},\n              safeAreaInsets = _ref7.safeAreaInsets,\n              _ref7$headerShown = _ref7.headerShown,\n              headerShown = _ref7$headerShown === void 0 ? isParentHeaderShown === false : _ref7$headerShown,\n              headerTransparent = _ref7.headerTransparent,\n              cardShadowEnabled = _ref7.cardShadowEnabled,\n              cardOverlayEnabled = _ref7.cardOverlayEnabled,\n              cardOverlay = _ref7.cardOverlay,\n              cardStyle = _ref7.cardStyle,\n              animationEnabled = _ref7.animationEnabled,\n              gestureResponseDistance = _ref7.gestureResponseDistance,\n              gestureVelocityImpact = _ref7.gestureVelocityImpact,\n              _ref7$gestureDirectio = _ref7.gestureDirection,\n              gestureDirection = _ref7$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref7$gestureDirectio,\n              _ref7$transitionSpec = _ref7.transitionSpec,\n              transitionSpec = _ref7$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref7$transitionSpec,\n              _ref7$cardStyleInterp = _ref7.cardStyleInterpolator,\n              cardStyleInterpolator = _ref7$cardStyleInterp === void 0 ? animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _ref7$cardStyleInterp,\n              _ref7$headerStyleInte = _ref7.headerStyleInterpolator,\n              headerStyleInterpolator = _ref7$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref7$headerStyleInte;\n\n          var transitionConfig = {\n            gestureDirection: gestureDirection,\n            transitionSpec: transitionSpec,\n            cardStyleInterpolator: cardStyleInterpolator,\n            headerStyleInterpolator: headerStyleInterpolator\n          };\n\n          if (index !== self.length - 1) {\n            var nextScene = scenes[index + 1];\n\n            if (nextScene) {\n              var _ref8 = nextScene.descriptor ? nextScene.descriptor.options : {},\n                  _animationEnabled = _ref8.animationEnabled,\n                  _ref8$gestureDirectio = _ref8.gestureDirection,\n                  _gestureDirection = _ref8$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref8$gestureDirectio,\n                  _ref8$transitionSpec = _ref8.transitionSpec,\n                  _transitionSpec = _ref8$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref8$transitionSpec,\n                  _ref8$cardStyleInterp = _ref8.cardStyleInterpolator,\n                  _cardStyleInterpolator = _ref8$cardStyleInterp === void 0 ? _animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _ref8$cardStyleInterp,\n                  _ref8$headerStyleInte = _ref8.headerStyleInterpolator,\n                  _headerStyleInterpolator = _ref8$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref8$headerStyleInte;\n\n              transitionConfig = {\n                gestureDirection: _gestureDirection,\n                transitionSpec: _transitionSpec,\n                cardStyleInterpolator: _cardStyleInterpolator,\n                headerStyleInterpolator: _headerStyleInterpolator\n              };\n            }\n          }\n\n          var _ref9 = safeAreaInsets || {},\n              _ref9$top = _ref9.top,\n              safeAreaInsetTop = _ref9$top === void 0 ? insets.top : _ref9$top,\n              _ref9$right = _ref9.right,\n              safeAreaInsetRight = _ref9$right === void 0 ? insets.right : _ref9$right,\n              _ref9$bottom = _ref9.bottom,\n              safeAreaInsetBottom = _ref9$bottom === void 0 ? insets.bottom : _ref9$bottom,\n              _ref9$left = _ref9.left,\n              safeAreaInsetLeft = _ref9$left === void 0 ? insets.left : _ref9$left;\n\n          var previousRoute = getPreviousRoute({\n            route: scene.route\n          });\n          var previousScene = scenes[index - 1];\n\n          if (previousRoute) {\n            for (var j = index - 1; j >= 0; j--) {\n              var s = scenes[j];\n\n              if (s && s.route.key === previousRoute.key) {\n                previousScene = s;\n                break;\n              }\n            }\n          }\n\n          var headerHeight = headerMode !== 'none' && headerShown !== false ? headerHeights[route.key] : 0;\n          return React.createElement(MaybeScreen, {\n            key: route.key,\n            style: StyleSheet.absoluteFill,\n            enabled: isScreensEnabled,\n            active: isScreenActive,\n            pointerEvents: \"box-none\"\n          }, React.createElement(CardContainer, _extends({\n            index: index,\n            active: index === self.length - 1,\n            focused: focused,\n            closing: closingRouteKeys.includes(route.key),\n            layout: layout,\n            gesture: gesture,\n            scene: scene,\n            previousScene: previousScene,\n            safeAreaInsetTop: safeAreaInsetTop,\n            safeAreaInsetRight: safeAreaInsetRight,\n            safeAreaInsetBottom: safeAreaInsetBottom,\n            safeAreaInsetLeft: safeAreaInsetLeft,\n            cardOverlay: cardOverlay,\n            cardOverlayEnabled: cardOverlayEnabled,\n            cardShadowEnabled: cardShadowEnabled,\n            cardStyle: cardStyle,\n            onPageChangeStart: onPageChangeStart,\n            onPageChangeConfirm: onPageChangeConfirm,\n            onPageChangeCancel: onPageChangeCancel,\n            gestureResponseDistance: gestureResponseDistance,\n            headerHeight: headerHeight,\n            onHeaderHeightChange: _this2.handleHeaderLayout,\n            getPreviousRoute: getPreviousRoute,\n            getFocusedRoute: _this2.getFocusedRoute,\n            mode: mode,\n            headerMode: headerMode,\n            headerShown: headerShown,\n            hasAbsoluteHeader: isFloatHeaderAbsolute && !headerTransparent,\n            renderHeader: renderHeader,\n            renderScene: renderScene,\n            onOpenRoute: onOpenRoute,\n            onCloseRoute: onCloseRoute,\n            onTransitionStart: onTransitionStart,\n            onTransitionEnd: onTransitionEnd,\n            gestureEnabled: index !== 0 && getGesturesEnabled({\n              route: route\n            }),\n            gestureVelocityImpact: gestureVelocityImpact\n          }, transitionConfig)));\n        })), isFloatHeaderAbsolute ? floatingHeader : null);\n      });\n    }\n  }]);\n\n  return CardStack;\n}(React.Component);\n\nexport { CardStack as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"sources":["CardStack.tsx"],"names":["forNoAnimation","EPSILON","FALLBACK_DESCRIPTOR","options","getHeaderHeights","descriptors","curr","style","StyleSheet","height","previous","safeAreaInsets","headerStatusBarHeight","top","acc","getDefaultHeaderHeight","getDistanceFromOptions","gestureDirection","mode","ModalTransition","DefaultTransition","getDistanceForDirection","getProgressFromGesture","distance","width","Math","layout","inputRange","outputRange","React","props","state","gestures","descriptor","animationEnabled","Animated","routes","scenes","previousRoute","self","index","nextRoute","oldScene","currentGesture","route","previousGesture","nextGesture","nextDescriptor","previousDescriptor","scene","progress","current","next","undefined","__memo","headerHeights","constructor","Dimensions","e","previousHeight","onPageChangeCancel","focusedRoute","focusedDescriptor","focusedOptions","defaultTransitionPreset","headerMode","headerStyleInterpolator","forNoAnimationHeader","insets","right","bottom","left","isScreensEnabled","Platform","isParentHeaderShown","isFloatHeaderAbsolute","headerShown","headerTransparent","floatingHeader","renderHeader","getPreviousRoute","getFocusedRoute","onContentHeightChange","styleInterpolator","styles","handleLayout","focused","gesture","isScreenActive","extrapolate","transitionSpec","cardStyleInterpolator","transitionConfig","nextScene","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","previousScene","j","s","headerHeight","closingRouteKeys","getGesturesEnabled","gestureVelocityImpact","container","flex","absolute","position","floating","zIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  LayoutChangeEvent,\n  Dimensions,\n  Platform,\n} from 'react-native';\nimport { EdgeInsets } from 'react-native-safe-area-context';\nimport { Route, StackNavigationState } from '@react-navigation/native';\n\nimport { MaybeScreenContainer, MaybeScreen } from '../Screens';\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport {\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  Scene,\n  StackDescriptorMap,\n  StackNavigationOptions,\n  StackDescriptor,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  mode: StackCardMode;\n  insets: EdgeInsets;\n  state: StackNavigationState;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  headerMode: StackHeaderMode;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene<Route<string>>[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const style: any = StyleSheet.flatten(options.headerStyle || {});\n\n    const height =\n      typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    const safeAreaInsets = {\n      ...insets,\n      ...options.safeAreaInsets,\n    };\n\n    const { headerStatusBarHeight = safeAreaInsets.top } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  mode: StackCardMode,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    gestureDirection = mode === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = descriptor?.options || {};\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  mode: StackCardMode,\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    mode,\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(\n              props.mode,\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            route,\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-ignore\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: { height, width },\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          state.descriptors,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getPreviousRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n\n    let defaultTransitionPreset =\n      mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = {\n        ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader,\n      };\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left,\n    } = focusedOptions.safeAreaInsets || {};\n\n    // Screens is buggy on iOS and web, so we only enable it on Android\n    // For modals, usually we want the screen underneath to be visible, so also disable it there\n    const isScreensEnabled = Platform.OS !== 'ios' && mode !== 'modal';\n\n    return (\n      <HeaderShownContext.Consumer>\n        {(isParentHeaderShown) => {\n          const isFloatHeaderAbsolute =\n            headerMode === 'float'\n              ? this.state.scenes.slice(-2).some((scene) => {\n                  const { descriptor } = scene;\n                  const options = descriptor ? descriptor.options : {};\n                  const {\n                    headerTransparent,\n                    headerShown = isParentHeaderShown === false,\n                  } = options;\n\n                  if (headerTransparent || headerShown === false) {\n                    return true;\n                  }\n\n                  return false;\n                })\n              : false;\n\n          const floatingHeader =\n            headerMode === 'float' ? (\n              <React.Fragment key=\"header\">\n                {renderHeader({\n                  mode: 'float',\n                  layout,\n                  insets: { top, right, bottom, left },\n                  scenes,\n                  getPreviousRoute,\n                  getFocusedRoute: this.getFocusedRoute,\n                  onContentHeightChange: this.handleHeaderLayout,\n                  gestureDirection:\n                    focusedOptions.gestureDirection !== undefined\n                      ? focusedOptions.gestureDirection\n                      : defaultTransitionPreset.gestureDirection,\n                  styleInterpolator:\n                    focusedOptions.headerStyleInterpolator !== undefined\n                      ? focusedOptions.headerStyleInterpolator\n                      : defaultTransitionPreset.headerStyleInterpolator,\n                  style: [\n                    styles.floating,\n                    isFloatHeaderAbsolute && styles.absolute,\n                  ],\n                })}\n              </React.Fragment>\n            ) : null;\n\n          return (\n            <React.Fragment>\n              {isFloatHeaderAbsolute ? null : floatingHeader}\n              <MaybeScreenContainer\n                enabled={isScreensEnabled}\n                style={styles.container}\n                onLayout={this.handleLayout}\n              >\n                {routes.map((route, index, self) => {\n                  const focused = focusedRoute.key === route.key;\n                  const gesture = gestures[route.key];\n                  const scene = scenes[index];\n\n                  const isScreenActive = scene.progress.next\n                    ? scene.progress.next.interpolate({\n                        inputRange: [0, 1 - EPSILON, 1],\n                        outputRange: [1, 1, 0],\n                        extrapolate: 'clamp',\n                      })\n                    : 1;\n\n                  const {\n                    safeAreaInsets,\n                    headerShown = isParentHeaderShown === false,\n                    headerTransparent,\n                    cardShadowEnabled,\n                    cardOverlayEnabled,\n                    cardOverlay,\n                    cardStyle,\n                    animationEnabled,\n                    gestureResponseDistance,\n                    gestureVelocityImpact,\n                    gestureDirection = defaultTransitionPreset.gestureDirection,\n                    transitionSpec = defaultTransitionPreset.transitionSpec,\n                    cardStyleInterpolator = animationEnabled === false\n                      ? forNoAnimationCard\n                      : defaultTransitionPreset.cardStyleInterpolator,\n                    headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                  } = scene.descriptor\n                    ? scene.descriptor.options\n                    : ({} as StackNavigationOptions);\n\n                  let transitionConfig = {\n                    gestureDirection,\n                    transitionSpec,\n                    cardStyleInterpolator,\n                    headerStyleInterpolator,\n                  };\n\n                  // When a screen is not the last, it should use next screen's transition config\n                  // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n                  // For example combining a slide and a modal transition would look wrong otherwise\n                  // With this approach, combining different transition styles in the same navigator mostly looks right\n                  // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n                  // but majority of the transitions look alright\n                  if (index !== self.length - 1) {\n                    const nextScene = scenes[index + 1];\n\n                    if (nextScene) {\n                      const {\n                        animationEnabled,\n                        gestureDirection = defaultTransitionPreset.gestureDirection,\n                        transitionSpec = defaultTransitionPreset.transitionSpec,\n                        cardStyleInterpolator = animationEnabled === false\n                          ? forNoAnimationCard\n                          : defaultTransitionPreset.cardStyleInterpolator,\n                        headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                      } = nextScene.descriptor\n                        ? nextScene.descriptor.options\n                        : ({} as StackNavigationOptions);\n\n                      transitionConfig = {\n                        gestureDirection,\n                        transitionSpec,\n                        cardStyleInterpolator,\n                        headerStyleInterpolator,\n                      };\n                    }\n                  }\n\n                  const {\n                    top: safeAreaInsetTop = insets.top,\n                    right: safeAreaInsetRight = insets.right,\n                    bottom: safeAreaInsetBottom = insets.bottom,\n                    left: safeAreaInsetLeft = insets.left,\n                  } = safeAreaInsets || {};\n\n                  const previousRoute = getPreviousRoute({\n                    route: scene.route,\n                  });\n\n                  let previousScene = scenes[index - 1];\n\n                  if (previousRoute) {\n                    // The previous scene will be shortly before the current scene in the array\n                    // So loop back from current index to avoid looping over the full array\n                    for (let j = index - 1; j >= 0; j--) {\n                      const s = scenes[j];\n\n                      if (s && s.route.key === previousRoute.key) {\n                        previousScene = s;\n                        break;\n                      }\n                    }\n                  }\n\n                  const headerHeight =\n                    headerMode !== 'none' && headerShown !== false\n                      ? headerHeights[route.key]\n                      : 0;\n\n                  return (\n                    <MaybeScreen\n                      key={route.key}\n                      style={StyleSheet.absoluteFill}\n                      enabled={isScreensEnabled}\n                      active={isScreenActive}\n                      pointerEvents=\"box-none\"\n                    >\n                      <CardContainer\n                        index={index}\n                        active={index === self.length - 1}\n                        focused={focused}\n                        closing={closingRouteKeys.includes(route.key)}\n                        layout={layout}\n                        gesture={gesture}\n                        scene={scene}\n                        previousScene={previousScene}\n                        safeAreaInsetTop={safeAreaInsetTop}\n                        safeAreaInsetRight={safeAreaInsetRight}\n                        safeAreaInsetBottom={safeAreaInsetBottom}\n                        safeAreaInsetLeft={safeAreaInsetLeft}\n                        cardOverlay={cardOverlay}\n                        cardOverlayEnabled={cardOverlayEnabled}\n                        cardShadowEnabled={cardShadowEnabled}\n                        cardStyle={cardStyle}\n                        onPageChangeStart={onPageChangeStart}\n                        onPageChangeConfirm={onPageChangeConfirm}\n                        onPageChangeCancel={onPageChangeCancel}\n                        gestureResponseDistance={gestureResponseDistance}\n                        headerHeight={headerHeight}\n                        onHeaderHeightChange={this.handleHeaderLayout}\n                        getPreviousRoute={getPreviousRoute}\n                        getFocusedRoute={this.getFocusedRoute}\n                        mode={mode}\n                        headerMode={headerMode}\n                        headerShown={headerShown}\n                        hasAbsoluteHeader={\n                          isFloatHeaderAbsolute && !headerTransparent\n                        }\n                        renderHeader={renderHeader}\n                        renderScene={renderScene}\n                        onOpenRoute={onOpenRoute}\n                        onCloseRoute={onCloseRoute}\n                        onTransitionStart={onTransitionStart}\n                        onTransitionEnd={onTransitionEnd}\n                        gestureEnabled={\n                          index !== 0 && getGesturesEnabled({ route })\n                        }\n                        gestureVelocityImpact={gestureVelocityImpact}\n                        {...transitionConfig}\n                      />\n                    </MaybeScreen>\n                  );\n                })}\n              </MaybeScreenContainer>\n              {isFloatHeaderAbsolute ? floatingHeader : null}\n            </React.Fragment>\n          );\n        }}\n      </HeaderShownContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}